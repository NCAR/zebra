!
! Stuff for time-height plots.
!

require form-utilities
require xytrace

! Historically this was here, so may as well include it
!
require time-height-contour

!
! Left button menu for the global component, vertical version
!
define widget vertical-global-left intmenu 'Global left menu'
	title 'Global Options'
	line
	entry 'Adjust global limits' 'popup th-global'
	line
	entry 'Overlay Times Window...' 'popup overlay'
	entry 'Movie Controller...' 'popup movie'
	entry 'Generate Images...' 'popup imagecrank'
	entry 'Raise IconBar...' 'dm "popup iconbar"'
	line
	submenu 'Window Operations' global-window-ops
	submenu 'Layout Parameters'  global-layout
	line
	entry 'Help on this Plot Type' 'plot-type-help'
endmenu


define widget vertical-left intmenu 'x'
        title 'Time-height component'
	line
	entry 'Enable side annotation' \
		'ToggleBoolean "do-side-annotation"' \
		(PDParam(icon_component,"do-side-annotation") <> "false")
        submenu 'Side annotation size' side-annot-scale
        line
	entry 'Clone this component...' 'xyaddfield'
        entry 'Raise to top' 'move #icon_component 0'
        entry 'Move to bottom' 'move #icon_component 1'
        entry 'Disable/reenable' 'ToggleBoolean "disable"' \
                (PDParam(icon_component,"disable") = "true")
        entry 'Remove' 'i_remove_component'
endmenu



!
! big damn form widget to tweak all these parameters.
!
define widget th-global form 'global time-height parameters'
	noheader
	popup 'thg-popup'

	label title 'Time-height global parameters'
	button help 'Help' command 'help time-height'
	button apply 'Apply' command 'thg-apply'
	button dismiss 'Dismiss' color red command 'popdown #ui$form'
	label comp 'x' width 1 color gray95
	newline

	label l1 'Time period:'
	blank time 'funky' width 50 command 'thg-apply'
	label l2 '(s = seconds, m = minutes, h = hours)'
	newline

!
! Height scale mode.
!
	label lmode 'Height Scale Mode: '
	button mode 'FUNKY' command 'fu-toggle-enum autoscale manual' width 80
	newline

	label l3 'Height from:'
	blank minheight 'funky' width 60 command 'thg-apply'
	label l4 'to:'
	blank maxheight 'funky' width 60 command 'thg-apply'
	label l5 ', with lines every'
	blank lines 'funky' width 60 command 'thg-apply'
enddef



procedure thg-popup
	local f ui$form
	local c icon_component
!
! We are no longer dependent on the particular y-field of the
! component, since we set the global scale parameters which
! will take precedence over any per-component settings.
!
!	local fld PDParam('global','y-field')

	formtext #f comp #c
	local t PDParam('global','xy-series-span')
	formtext #f time #t

	local minheight PDParam('global','xy-scale-y-min')
	if (minheight = PUNDEF)
		local minheight '0.0'
	endif
	formtext #f minheight #minheight

	local maxheight PDParam('global','xy-scale-y-max')
	if (maxheight = PUNDEF)
		local maxheight '0.0'
	endif
	formtext #f maxheight #maxheight

	! This expects there to be no 'scale-y-mode' in the component,
	! so that only the global xy- qualified setting takes effect.
	local mode PDParam('global', 'xy-scale-y-mode')
	if (mode = 'auto' or mode = 'autoscale')
		formtext #f mode 'autoscale'
	else
		formtext #f mode 'manual'
	endif

	local l PDParam('global','xy-axis-l-tic-interval')
	formtext #f lines #l
endprocedure


procedure thg-apply
	local f ui$form
	local c getftext(f, 'comp')

	local t getftext(f, 'time')
	parameter global xy-series-span #t

	local minheight getftext(f,'minheight')
	parameter 'global' 'xy-scale-y-min' #minheight

	local mode getftext(f, 'mode')
	parameter 'global' 'xy-scale-y-mode' #mode

	local maxheight getftext(f,'maxheight')
	parameter 'global' 'xy-scale-y-max' #maxheight

	local l getftext(f, 'lines')
	parameter global xy-axis-l-tic-interval #l
endprocedure

