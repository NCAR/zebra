!
! A nifty widget for tweaking irgrid/xygraph gridding params.
!
define widget InterpParams form "Surface interpolation parameters"
	popup IPSetup
	noheader
!
! Title line.
!
	label l0 'Surface interpolation parameters'
	label comp 'comp' color gray95 width 1
	newline
	button help 'Help' command 'help interpmethods'
	button apply 'Apply' command IPApply
	button zap 'Dismiss' color red command 'popdown #ui$form'
!
! Methods.
!
	newline
	label l1 'Interpolation method: '
	pulldown method 'rgrid' width 120 menu int-methods
	newline
!
! Params for the barnes method.
!
	label l2 'Barnes parameters:'
	newline
	label l3 '  Grid resolution: '
	blank gx '20' width 50 command IPApply
	label l4 '(x)'
	blank gy '20' width 50 command IPApply
	label l5 '(y)'
	newline
	label l6 '  Radius of influence:'
	blank radius '2.0' width 50 command IPApply
	label l7 'Max fill: '
	blank fill '3.0' width 50 command IPApply
!	newline
!	label gripe ' ' color red width 200
enddef


define widget int-methods intmenu 'interp methods'
	title 'Interpolation methods'
	line
	entry 'Triangulation (RGRID)' 'IPSetMethod rgrid'
	entry 'Barnes analysis' 'IPSetMethod barnes'
	entry 'Closest point' 'IPSetMethod closest-point'
endmenu

define widget xy-int-methods intmenu 'x'
       	title 'XYGraph interpolation methods'
	line
	entry 'Profile-linear' 'IPSetMethod profile-linear'
	entry 'Closest point' 'IPSetMethod raw'
!	entry 'Triangulation (RGRID) (Not recommended)' 'IPSetMethod rgrid'
endmenu

define widget int-grid-params intmenu 'params'
	title 'Interpolation parameters'
	line
	entry 'Popup interpolation parameters widget' 'popup InterpParams'
endmenu


!
! Setup for xygraphs.
!
procedure IPXYSetup f string
   	formtext #f l0 'XYGraph interpolation parameters'
	formmenu #f method xy-int-methods
	formtext #f radius 'n/a'
	formtext #f fill 'n/a'
	local method PDSearch(icon_component, 'grid-method', 'xy-contour')
	if (method <> '(Undefined)')
		formtext #f method #method
	else
		formtext #f method 'profile-linear'
	endif
	local gx PDSearch(icon_component,'x-grid','xy-contour')
	if (gx <> '(Undefined)')
		formtext #f gx #gx
	endif
	local gy PDSearch(icon_component,'y-grid','xy-contour')
	if (gy <> '(Undefined)')
		formtext #f gy #gy
	endif
endprocedure



!
! The popup procedure.
!
procedure IPSetup
	local f ui$form
	local plat pd_param(icon_component,'platform','string')
	formtext #f comp #icon_component
	local xygraph (PDParam('global','plot-type') = 'xygraph')
!
! If we really have an xygraph, do it separately.
!
	if (xygraph)
		IPXYSetup #f
		return
	endif
!
! OK, CAP-type stuff here.
!
	local method PDSearch(icon_component, 'grid-method', platform)
	if (method <> '(Undefined)')
		formtext #f method #method
	endif
!
! Other parameters.
!
	local gx pd_paramsearch(icon_component,'x-points',platform,'string')
	if (gx <> '(Undefined)')
		formtext #f gx #gx
	endif
	local gy pd_paramsearch(icon_component,'y-points',platform,'string')
	if (gy <> '(Undefined)')
		formtext #f gy #gy
	endif
	local rad pd_paramsearch(icon_component,'radius',platform,'string')
	if (rad <> '(Undefined)')
		formtext #f radius #rad
	endif
	local fill pd_paramsearch(icon_component,'max-fill',platform,'string')
	if (fill <> '(Undefined)')
		formtext #f fill #fill
	endif
endprocedure




!
! Apply changes.
!
procedure IPApply
	local f ui$form
	local c getftext(f,'comp')
	local method getftext(f,'method')
	parameter #c 'grid-method' #method

	local gx getftext(f,'gx')
	local gy getftext(f,'gy')
	if (PDParam ('global', 'plot-type') <> 'xygraph')
		parameter #c 'x-points' #gx
		parameter #c 'y-points' #gy
		local radius getftext(f,'radius')
		parameter #c 'radius' #radius
		local fill getftext(f,'fill')
		parameter #c 'max-fill' #fill
	else
		parameter #c 'x-grid' #gx
		parameter #c 'y-grid' #gy
	endif
endprocedure



procedure IPSetMethod method string
	formtext #ui$form 'method' #method
endprocedure
