! $Id: cfg-tools,v 1.2 2000-12-05 19:07:36 granger Exp $
!
! Define some procedures for flexible configuration editing
!

set PUNDEF "(Undefined)"

!
! Point to a window and delete it
!
procedure point-and-shoot
	set victim 'none'
	pickwin victim
	if (victim <> 'none')
		message "Killing #" victim
		kill #victim
	else
		beep
	endif
endprocedure

!
! Remove configuration.  Looks for the current configuration in
! ConfigDir and moves it to the ./removed directory.  
!
procedure cfg-remove

	local file concat3(ConfigDir,"/",dm$config)
	local dest concat3(" ./removed","/",dm$config)

	shell "mkdir ./removed >/dev/null 2>&1"
	message "#" concat3("mv -f ",file,dest)
	shell concat3("mv -f ",file,dest)
	local file concat(file,".dc")
	local dest concat(dest,".dc")
	message "#" concat3("mv -f ",file,dest)
	shell concat3("mv -f ",file,dest)
	display empty

endprocedure


!
! Used to restore a config by first changing to this one
!
config none
endconfig

!
! Restore the configuration to its last saved state.  This amounts to
! switching to the none configuration and back to the current one.
!
procedure cfg-restore
	local original dm$config

	display none
	display #original
endprocedure


!
! Create a graphic window, passing the 'rename' option so that we get a
! unique name instead of failing.
!
prototype fallback Graphic gp gp.init

procedure create-window name string pdname string bmap string
	newgraphic Graphic #name #pdname forcepd buttonmap #bmap rename
endprocedure


!
! Provide a fallback Clock class in case one not defined elsewhere,
! and use the class to instantiate a clock window.  We assume the pd
! whiteclock is already defined.
!
prototype fallback Clock fccclock

procedure create-clock
	newgraphic Clock Clock whiteclock buttonmap default
endprocedure


! ================================================================
!
! Utilities for using a single display config "template" across
! multiple platforms, for example ISS platforms.  The template can be
! saved with any platforms set in the parameters, but when realized the
! platform parameters are set to the desired platform.
!
! We must display the template config first, then we loop through all
! components of all the windows switching the platform parameter.  The
! template window pds are changed also so that the current platform is
! preserved if the window is reset.  We cannot just change the window pd
! directly after displaying the config, since the window may process its
! parameter change before it has received its initial pd.  So we copy the
! window pd's first, make the parameter changes, and finally call newpd to
! apply the changes.
!
! A second procedure is provided which resets the display config by
! resetting each window in the config.

procedure pd-set-platform pd string platform string method string

	local comps pd_complist(pd)
	local setmethod method
	if (method = "")
		local setmethod "pd-direct-method"
	endif
	foreach comp #comps
		local current PDParam(pd,comp,"platform")
		if (current <> PUNDEF and current <> "null")
			#setmethod #pd #comp #current #platform
		endif
	endfor

endprocedure


procedure pd-direct-method pd string comp string current string platform string
	parameter #pd #comp platform #platform
endprocedure


procedure cfg-set-platform platform string method string

	windowlist wins
	foreach win #wins

		! Change the dconfig base window pd
		local pd PDParam(win,"global","pd-name")
		pd-set-platform #pd #platform #method

		! Copy and change the current window pd
		local pd concat3(dm$config,"-tmp-",win)
		pdcopy #win #pd
		pd-set-platform #pd #platform #method
		newpd win pd

	endfor

endprocedure


! Apparently something gets messed up if try to run the cfg-set-platform
! command right after changing the display, so we have to defer execution
! of the platform change by putting it in a 'different thread', so to speak.
!
procedure cfg-platform-display dconfig string platform string method string

	display #dconfig

	local amp ' &'
	local runcmd concat("zrun ",c$msgname)
	local runcmd concat4(runcmd," 'cfg-set-platform ",platform," ")
	local runcmd concat4(runcmd,method,"'",amp)
	local runcmd quote(runcmd)
	shell #runcmd

endprocedure


procedure cfg-reset

	windowlist wins
	foreach win #wins

		local pd PDParam(win,"global","pd-name")
		newpd win pd

	endfor

endprocedure


