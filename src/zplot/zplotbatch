#! /bin/sh
#
# $Id: zplotbatch,v 1.35 2006-02-27 18:46:35 granger Exp $
#
# Start a display manager session with a virtual X server and dump
# images of its plots.

# Set to 'echo' to debug rather than actually dump images
echo=
errors=""

# T-REX kludge for field catalog conventions: Translate certain iss
# configurations and plot window names into their field catalog 
# designations.
#
# This maps the display config name and window name
#  (eg iss1/class, iss-mapr/surfmet) to a platform and product, like
# (ISS1_Sounding, SkewT) and (ISS_MAPR_Surface, Surface_Met).


problem()
{
    echo "***" $*
    errors="$errors($*)"
}

# Path to Xvfb, -pn allows server to start even when all sockets (eg unix
# socket) cannot be setup for listening.  unix socket fails when another
# Xserver has already created /tmp/.X11-unix directory.  Disable access
# control with -ac so that others can connect to it no matter who starts
# it.  (ie, it may have been started a while ago as a different user, but
# we'll use that same one anyway.)
#
PATH="${PATH}:/usr/bin/X11:/usr/X11R6/bin"
export PATH
xvfb="Xvfb -pn -ac"

convert="convert -colors 128 +profile '*'"
#font="-font helvetica -pointsize 12"
font="-font '-*-helvetica-bold-r-*-*-12-*-*-*-*-*-iso8859-*'"

if [ x$BATCH_IMAGE_SPOOL = x ]; then
    echo "Batch image spool directory not set: BATCH_IMAGE_SPOOL"
    echo "This script probably needs to be run with 'zconfig'."
    exit 1
fi

spool="$BATCH_IMAGE_SPOOL"

# Display connection to use for virtual X server.
#
display=":9"

# Get a time
when=""
if [ $# -gt 0 ]; then
    when=$1
    shift
    case $when in
     *-*-*,*:*) 
	;;
     now) 
	;;
     -)
	echo "Accepting plots from stdin"
	;;
     *)
	when=""
	;;
    esac
else
    # Time defaults to now
    when=now
fi

# The only argument we really check is the first one
if [ "x$when" = "x" ]; then
    echo "Usage: $0 [ {now|<time>} config [window ..]]"
    echo "First argument, if present, must be 'now' or a time:"
    echo "$0 now [config] [window ..]"
    echo "$0 3-Dec-97,22:06:03 [config] [window ..]"
    echo "'now' is the default time."
    echo "A single argument of - accepts arguments from standard input:"
    echo "$0 -"
    echo "When reading stdin, lines are '{now|<time>} config [window ..]'"
    exit 1
fi

# Get a config
config=''
if [ $# -gt 0 ]; then
    config=$1
    shift
fi

# Get a window list
windows=''
while [ $# -gt 0 ]; do
    windows="$windows $1"
    shift
done

if [ "x$when" != "x-" ]; then
    temp=/tmp/batch-plot.$$
    echo "$when $config $windows" > $temp
    exec < $temp
fi

# Start our private, virtual X display.  This may fail if one is already
# there, in which case we'll use the existing one.  Use 'localhost' (not
# 'unix') to force network socket since unix socket may have failed. (see
# above.)  Redirect all i/o everything to completely divorce this process
# from this shell.
#
$xvfb $display </dev/null > /dev/null 2>&1 &
x=$!
DISPLAY=localhost${display}.0 ; export DISPLAY
# Try a series of connection attempts until it succeeds, else abort.
i=0
while [ $i -lt 5 ]; do
    echo "Checking for X connection..."
    if xdpyinfo > /dev/null 2>&1 ; then
	echo "Done."
	break
    fi
    i=`expr $i + 1`
    sleep 2
done
if [ $i -ge 5 ]; then
    echo "!! Could not connect to Xvfb at display $display. !!"
    exit 1
fi

# Make sure we have a datastore running; we don't need the event logger
ZEB_EVENTLOGGER=true ; export ZEB_EVENTLOGGER
echo "-- Checking for datastore session..."
zstart -n -preserve -ds $ZEB_PROJDIR </dev/null >/dev/null 2>&1
sleep 1

# Then start a private display session
# We set the dm name explicitly so that we can query it

DEFAULT_CONFIG=empty
DM=B$$
ZEB_DM="dm"
ZEB_DM_CONFIG="-multiple -name $DM dm.config"
export DEFAULT_CONFIG ZEB_DM_CONFIG ZEB_DM
echo "-- Starting display manager:"
zstart -dm -preserve $ZEB_PROJDIR &
dm=$!
sleep 2
# Wait for dm to connect to datastore, then wait for dm to respond to
# a query once daemon scan finally finishes
if zquery -t 5 $DM >/dev/null 2>&1 ||
   zquery -t 15 $DM >/dev/null 2>&1 ||
   zquery -t 60 $DM >/dev/null 2>&1 ||
   zquery -t 300 $DM >/dev/null 2>&1 ; then true ; else
    echo "$DM display never connected."
    mstatus
    echo "Stopping $DM..."
    zstop $DM
    mstatus
    exit 1
fi

images=''
lastconfig=''
now=`zquery -t 10 timer`
if [ $? -ne 0 ]; then
    problem "Failed to get current time!"
else
now=`echo $now | egrep 'Current time' | sed -e 's/^.*is //'`
echo "Current time: $now"

# Begin looping over the plots we're supposed to make
while read when config windows; do

    echo "Processing: $when $config $windows"

    if [ x$config != x$lastconfig ]; then
	(set -x; zrun $DM "display $config")
	if [ $? -ne 0 ]; then
	    problem "Error changing display config with zrun."
	    continue
	fi
	# There is no (easy) way to know if a config change has
	# completed, so all we can do is wait a little and hope
	# things settle down in time.
	sleep 2
	lastconfig="$config";
    fi
    if [ $when = "now" ]; then
	when=$now
    fi
    (set -x; zrun $DM "history all $when")
    if [ $? -ne 0 ]; then
	problem "Failed to set time: $when"
	continue
    fi
    # Likewise give the windows a little time to receive the time change,
    # but in this case we'll actually verify the time change further down.
    sleep 2

    # Get a list of the graphics processes appearing in this display
    procs=`mstatus | egrep "group-$DM" | sed -e 's,^.*:,,g' -e 's/,//g'`
    if [ -z "$procs" ]; then
	problem "Failed to discover any graphics processes."
	continue
    fi
    echo "Processes: $procs"

    # For each process, tell it to dump its plot

    # Field catalog filenames: 
    #   research.<platform>.YYYYMMDDHHmm.<product>.png
    # Derive the image name from the plot time
    set `ztsplit $when`
    base="${config}.$1$2$3$4$5."
    # For the Web, put the images in directories by date, lumping
    # images from all instruments into the same directory.
    subspool="${spool}/$1$2$3"
    echo "Putting images in $subspool"
    if [ ! -d $subspool ]; then
	mkdir -p $subspool
    fi

    queryprocs=''
    for plot in $procs ; do

	# For each process, check that it has an active window and get the name
	# zquery returns a line like this:
	# Graphics process surfrad, window 'surfrad' DOWN ...
	qwin=`zquery -t 10 $plot | head -1`
	if echo "$qwin" | egrep 'Graphics process.*UP' >/dev/null ; then
	    true
	else
	    continue
	fi
	win=`echo "$qwin" | sed -e "s/^[^']*'//" -e "s/'.*//" `

	# If we have specific targets, skip this window if it's not one of them
	if test "$windows" = "" || echo "$windows" | egrep -s "$win"; then

	    # Time changes from the 'history' command sent to the dm above
	    # should have entered the queue and should precede the enqueue
	    # of the imgdump below.  However, it is possible (though in
	    # practice extremely rare) for the imgdump to be received
	    # before the time change, presumably because the latter has to
	    # go through the dm first.  Also, there is a risk of great
	    # confusion for an image dump file to have a time in its name
	    # which differs from the actual plot time.  Therefore, this
	    # next step verifies that the time change has taken effect
	    # before dumping the plot image.  Again, in practice, this
	    # should not cause much delay except for the few cases where
	    # the time change has not taken effect yet.

	    wtime=`zquery -t 10 $plot | egrep 'plot-time:' | sed 's/^.*plot-time:[^0-9]*//'`
	    count=0
	    while [ "`ztsplit $wtime`" != "`ztsplit $when`" ]; do
		[ $count -gt 4 ] && break
		count=`expr $count + 1`
		echo "+++ $win ($plot) still has the wrong plot time..."
		(set -x; zrun $DM "history all $when")
		sleep 2
		wtime=`zquery -t 10 $plot | egrep 'plot-time:' | sed 's/^.*plot-time:[^0-9]*//'`
	    done
	    if [ $count -gt 4 ]; then
		problem "Skipping $plot: still at $wtime instead of $when."
		continue
	    fi

	    echo "Process $plot active, displaying window $win at $wtime."
	    name="$subspool/${base}${win}"
	    /bin/rm -f "${name}.xwd" "${name}.png"

	    # Form the file name by extracting the plot name from the
	    # process. An alternative is to grep the pd-name from a zquery
	    # of the process, which includes the config name.  For now we
	    # can prepend the config here.

	    images="$images ${name}.png"
	    (set -x; zrun $plot \
		"enqueue display 'imgdump xwd \"${name}.xwd\" ' " ; \
	     set +x ; sleep 1 ; \
	     zquery -t 15 $plot >/dev/null ; set -x ; \
	     $convert $font -gravity southwest -fill black -box white \
		-draw "text 20,20 ' REAL-TIME DATA, NOT CHECKED FOR QUALITY '"\
		"${name}.xwd" "png:${name}.png.tmp" ; \
	     /bin/mv -f "${name}.png.tmp" "${name}.png" ; \
	     /bin/rm -f "${name}.xwd" ) &
	    queryprocs="$queryprocs $plot"

	fi

    done
    # Now make sure each imgdump has finished before possibly switching
    # to another display configuration.  This is our re-synch or rendezvous
    # of all the background parallel image dumps.  convert may still be
    # running on the images, but we're through with those files.  The sleep
    # is to give the windows time to actually start the dumps, so that
    # our query doesn't succeed *before* the imgdump command is received.
    echo "Waiting for windows to finish image dumps..."
    sleep 2
    for plot in $queryprocs ; do
        zquery -t 30 $plot > /dev/null
    done
    echo "Window dumps finished."

done
fi
# End of 'if zquery timer successful'

if [ -f "$temp" ]; then
    rm -f $temp
fi

# Exit the window manager, give it a little time to shutdown before
# killing it outright, but there's no reason to hang around here waiting
# for it to die.
echo "Shutting down $DM."
(zrun $DM 'shutdown'; sleep 10; kill $dm) > /dev/null 2>&1 &

# We'd kill our virtual X server, but another batch-plot may be using it
# kill $x

# Kill the server if no one else is using it
#if [ `xlswins -display $display | wc -l` -lt 2 ]; then
#    kill `ps -e | grep Xvfb | grep -v grep | awk -e '{ print $1; }'`
#    # Give the server time to die and clear its socket
#fi

wait

# Pass on the image file names in sorted order
echo Images: `(for img in $images DONE ; do
		if [ $img != "DONE" ]; then
		    echo $img
		fi
	       done) | sort`

if [ -n "$errors" ]; then
    echo "*** Problems ***"
    echo $errors
    exit 1
fi
echo "___ No problems. ___"
exit 0
