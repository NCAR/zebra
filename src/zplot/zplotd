#! /usr/bin/env perl
#
# Sit and wait for notifications on platforms, generate images, and
# optionally ftp them to a remote host.
#

use Time::Local;
use POSIX;

if ( ! $ENV{'ZEB_TOPDIR'} ) { die "ZEB_TOPDIR must be set."; }
push(@INC,"$ENV{'ZEB_TOPDIR'}/bin");
require libzplot;

# Use an associative array to give the config and window to plot
# when a given platform is updated.

$D_Out  = 1;    # Just pipe log output to stdout as well as to file
$D_NoFtp = 2;   # Skip ftp
$D_NoPlot = 3;  # Skip batch plot and ftp
$D_NoEmail = 4; # Don't email

$debug = 0;		     	# No debugging
$FAIL = "ZPLOTD_FAILED";	# failure string

@clo = ();
while ($pattern = shift @ARGV)
{
    if ($pattern =~ /-h.*/)
    {
	print "Usage:\n";
	print "$0 [-debug] [-d<DEBUGLEVEL>] [-queue file] [-batch file]" . 
	    "{-since|-notice|-time|-period} [platforms ...]\n";
	print "-since [timestampfile]\n";
	print "\n",
	    "   Generate new plot images for all platforms with data\n" .
	    "   more recent than the timestamps in the <timestampfile>.\n";
	print "-notice [platforms ...]\n";
	print "   Generate plots on each notify from dsnotice\n";
	print "-time <begin> <end>\n";
	print
	    "   Generate plots with the given end time for all platforms\n" .
	    "   with data between begin and end.\n" . 
	    "   Times are dd-mon-yyyy,hh:mm:ss\n";
	print "-period <end>\n";
	print
	    "   Generate plots with the given end time for all platforms,\n" .
	    "   where the data begin time is calculated from the project\n" . 
	    "   parameter PLOT_PERIOD (in hours).\n" .
	    "   Times are dd-mon-yyyy,hh:mm:ss\n";
	print "-enqueue <file>\n" . 
	    "   Append platform queue to the file and exit.\n";
	print "   The file is in the format read by zplotbatch.\n";
	print "-batch <file>\n   Append plot lines to a file and exit.\n";
	print "-dequeue <file>\n" .
	    "   Read the plot queue from the given file\n" .
	    "   as the list of plots to be generated.\n";
	print "-norescan\n   No datastore rescan.\n";
	print "\n";
	print "The debug and platform options are recognized by all\n";
	print "variations.  If platforms are given, only those platforms\n";
	print "matching the regexp name from the command line will be\n";
	print "checked for new data and plotted.\n";
	print "\n";
	print "This script and the scripts it calls (zplotbatch and others)\n";
	print "need configuration information from the project's proj_env\n";
	print "file, so it probably needs to be run with zconfig.\n";
	print "\n";
	print "If -since, -notice, -period, nor -time are chosen,\n";
	print "read stdin in the format of dsnotice update lines.\n";
	exit 0;
    }
    if ($pattern =~ /^-d(\d*)/)
    {
	if ($1) 
	{
	    $debug = $1;
	}
	else
	{
	    ++$debug;
	}
	next;
    }
    push (@clo, $pattern);
}

# Some option variables we need
$image_mail_list = " $ENV{'IMAGE_MAIL_LIST'} ";
$enable_ftp = $ENV{'PLOT_FTP_ENABLE'};

# Project directory
$project = "$ENV{'ZEB_PROJDIR'}";
$project_name = $ENV{'PROJECT_NAME'};
if (! $project_name) { $project_name = `basename $project`; }

if (! $ENV{'PLOT_PLATFORMS'})
{
    print "Need a platforms file set in PLOT_PLATFORMS\n";
    exit 1;
}

%Observations = ();
%Plots = ();

$plotfile = "$ENV{'PLOT_PLATFORMS'}";
open(PLOTS, "$plotfile") || die "$plotfile: $!\n";
while (<PLOTS>)
{
    next if /^\s*(#.*)?$/;
    ($platform, $obs, @windows) = split(/\s+/,$_);
    if ("$obs" eq "status")
    {
	# This is a status message for this particular platform.
	($message) = /\S+\s+\S+\s+(.*)\s*$/;
	print "$platform status: $message\n" if ($debug);
	next;
    }
    print "$platform, $obs, ", join(' ', @windows), "\n" if ($debug);
    if ("$obs" eq "yes")
    {
	$Observations{"$platform"} = 1;
    }
    $Plots{"$platform"} = join (' ', @windows);
}
close(PLOTS);

# print "Plots: \n", join("\n", %Plots), "\n" if ($debug);
# print "Observations: \n", join("\n", %Observations), "\n" if ($debug);

@Queue = ();
@Targets = ();
%Pending = ();		# Platforms already in queue
%Displays = ();

# Default to getting notifications from standard input
$since = 0;		# Plot only data since a given timestamp
$notice = 0;		# Plot data as notices received from dsnotice
$first = 0;		# true when platforms were queued from the cmd-line
$batchfile = '';        # Batch file to which to write batch plot lines
$enqfile = '';          # Queue file to which to write platform plot queue
$deqfile = '';          # Queue file from which plot queue will be read
$norescan = 0;

# If we we're passed platform names or regular expressions on the
# command line, just do those
while ($pattern = shift @clo)
{
    if ($pattern eq "-dequeue")
    {
	$deqfile = shift @clo;
	die "file needed for -dequeue option" unless ($deqfile);
	die "cannot choose both -dequeue and -enqueue" if ($enqfile);
	next;
    }
    if ($pattern eq "-enqueue")
    {
	$enqfile = shift @clo;
	die "file needed for -enqueue option" unless ($enqfile);
	die "cannot choose both -dequeue and -enqueue" if ($deqfile);
	next;
    }
    if ($pattern eq "-batch")
    {
	$batchfile = shift @clo;
	die "file needed for -batch option" unless ($batchfile);
	next;
    }
    if ($pattern eq "-norescan")
    {
	$norescan = 1;
	next;
    }
    if ($pattern eq "-since")
    {
	$since = shift @clo;
	$since = " " unless ($since);
	next;
    }
    if ($pattern eq "-notice")
    {
	$notice = 1;
	next;
    }
    if ($pattern eq "-period")
    {
	$fixtime = 1;
	$plot_period = $ENV{'PLOT_PERIOD'};
	if (! $plot_period)
	{
	    die "PLOT_PERIOD must be set for -period plots";
	}
	$fixend = shift @clo;
	die "plot time needed for -period" 
	    unless ($fixend);
	$fixbegin = &syszt (&ztsys ($fixend) - ($plot_period * 3600));
	next;
    }
    if ($pattern eq "-time")
    {
	$fixtime = 1;
	$fixbegin = shift @clo;
	$fixend = shift @clo;
	die "begin and end time needed for -time" 
	    unless ($fixbegin && $fixend);
	next;
    }
    foreach $platform (keys(%Plots))
    {
	if ($platform =~ /$pattern/)
	{
	    $first = 1;
	    if (! $Pending{$platform})
	    {
		$entry = join(' ', ($platform, "now", $Plots{$platform}));
		push (@Queue, $entry);
		push (@Targets, $platform);
		$Pending{$platform} = 1;
	    }
	}
    }
}
print STDERR "Debug level = $debug\n" if $debug;
print STDERR "Queueing: \n   ",
    join("\n   ",@Queue), "\n" unless (! $first);

# The target platform plots default to all of them
if (! @Targets) { @Targets = keys(%Plots); }

# If we weren't told to get input elsewhere, then
# just clear the queue and we're done
if ($first && ! $since && ! $notice && ! $fixtime)
{
    &clear;
    exit 0;
}

# Otherwise the queue is filled from datastore inquiries on our targets
@Queue = ();
%Pending = ();

$dt = `date -u '+%y%m%d.%H%M'`;
chop $dt;
system("mkdir $project/logs > /dev/null 2>&1");
$log="$project/logs/zplotd.$dt.log";
if ($debug >= $D_Out)
{
    open(LOG, "| tee $log") || die "$log : $!\n";
}
else
{
    open(LOG, "> $log") || die "$log : $!\n";
}
select LOG;
$| = 1;
open(STDOUT, ">& LOG") || die "could not redirect stdout: $!\n";
open(STDERR, ">& LOG") || die "could not redirect stderr: $!\n";
print "Log file: $log\n";
$EL = "true";
#$EL = "EventLogger -n -l epic -f logs/zebra.$dt.log";

if (! $deqfile)
{
    # Make sure zebra is running; usually it should already be running
    if (system("ZEB_EVENTLOGGER=\"$EL\" zstart -n -ds -preserve $project </dev/null >/dev/null 2>&1"))
    {
	die "Failed to start zebra.\n";
    }
    sleep 5;

    # Request a rescan to check for new data files; we shouldn't need to wait
    # for the rescan to finish, since later queries of the daemon should just
    # block until the rescan is done.

    $norescan || !system("dsrescan -all") || die "*** dsrescan failed ***";
    sleep 1;
}

$timeout = 0;

# Open our source for platform and file notices
if ($deqfile)
{
    # No DS to open and all other platform queue options ignored
    print "Reading queue from file: $deqfile\n";
}
elsif ($since)
{
    $until = "$since.update";
    # If we're only plotting since a given time, get our platform list from 
    # the dfsince script.
    $targets = join('|',@Targets);
    print "Opening dfsince $since and matching \'$targets\'...\n";
    open (DS, "dfsince $since 2> /dev/null | egrep -e \'$targets\' | ") || 
	die "dfsince: $!";
}
elsif ($notice)
{
    # Open a dsnotice session and read the output
    $targets = join(' ',@Targets);
    print "Opening dsnotice -dir $targets ...\n";
    open (DS, "dsnotice -dir $targets 2>&1 |") || 
	die "dsnotice: $!";
    $timeout = 30;
}
elsif ($fixtime)
{
    # Get a list of platforms to plot with data within the given time
    # period.
    $targets = join(' -e ',@Targets);
    print "Running dsdump -l -p $fixbegin -p $fixend -e $targets...\n";
    open (DS, "dsdump -l -p $fixbegin -p $fixend $targets |") ||
	die "dsdump: $!";
}
else
{
    # Just use standard input
    print "Opening -\n";
    open (DS, "-") || die "stdin: $!";
}


$SIG{'ALRM'} = 'clear';

if (! $deqfile) {
if ($enqfile)
{
    open (QUEUE, ">> $enqfile") || die "$enqfile: $!";
}
while (<DS>)
{
	next if /Receiving/;	# Skip dsnotice start-up line

	# Remove any elog verbosity
	s/^.*Notice-\S+ //g;
	# Decipher the line
	($platform, $file, $dir, $time, $nsample) = split(/\s+/,$_);
	print "$platform $file $time $nsample" if ($debug);

	# If not in our list of plots, ignore it
	if (defined $Plots{$platform} &&
	    ($Observations{$platform} || ! $Pending{$platform}))
	{
	    $Pending{$platform} = 1;

	    # The plot time for this platform must be adjusted when
	    # plotting a fixed period or an observation platform.
	    # Observation platforms use the observation (file) begin time
	    # as the plot time, determined with dsdump.  This also means
	    # all 'observations' with data within a fixed period will
	    # always be plotted, rather than overwriting each other
	    # if all are given the same end time.
	    if ($Observations{$platform})
	    {
		$obs=`dsdump -e $platform | egrep $time | awk '{print \$2;}'`;
		chop $obs;
		print "\nobservation $time reset to $obs"
		    if ($debug);
		$time = $obs;
	    }
	    elsif ($fixtime)
	    {
		$time = $fixend;
	    }
	    # This latest notify will overwrite any notifications for this
	    # platform already in the queue
	    $entry = join(' ', ($platform, $time, $Plots{$platform}));
	    push (@Queue, $entry);
	    if ($enqfile)
	    {
		print QUEUE $entry, "\n";
	    }

	    # After adding to the queue, set the alarm to clear the queue
	    # after a suitable timeout with no further notifications.
	    alarm($timeout);
	    
	    print " ...queued\n" if ($debug);
	}
	else
	{
	    print " ...skip\n" if ($debug);
	}
}
print "Input exhausted.\n" if $debug;
close DS;
if ($enqfile)
{
    close QUEUE;
    exit 0;
}
}
else
{
    # Read our queue from the given file
    open (QUEUE, "$deqfile") || die "$deqfile: $!";
    while (<QUEUE>)
    {
	$entry = $_;
	chop $entry;
	print "$entry ...queued\n" if ($debug);
	push (@Queue, $entry);
    }
    close QUEUE;
}

# Clear anything left in the queue
&clear;

# Now we can update the times to which we've plotted
# move $until into $since

# Make sure we exit, even if it means aborting a hang
$SIG{'ALRM'} = 'exit';
alarm(30);

# For some reason STDOUT and STDERR must be closed before LOG can close,
# else perl hangs.  It might be because they have been redirected to LOG.
close STDOUT;
close STDERR;
close LOG;

exit 0;

sub clear
{
    $result = 1;
    alarm(0);
    print "Clearing queue...\n" if $debug;

    if ($#Queue < 0)
    {
	print "clear: No platforms in queue.\n";
	return 1;
    }

    $dt = `date -u '+%y%m%d.%H%M'`;
    chop $dt;

    # Finally, we can plot each config and its windows.
    # Open zplotbatch and pipe our plot entries to it.

    $images = "";
    $status="ok";
    if ($batchfile)
    {
	$batch = $batchfile;
    }
    else
    {
	$batch = "/tmp/zplotd.batch.$$";
	unlink($batch);
    }
    %Configs = ();
    # Group plots by time and config, with config first so that we
    # can sort the list by config name and minimize display config
    # switches in zplotbatch.
    foreach $entry (@Queue)
    {
	($platform, $time, $config, @window) = split(/\s+/,$entry);
	$value = $Configs{"$config $time"};
	foreach $w (@window)
	{
	    if ("$value" !~ /\b$w\b/)
	    {
		$value .= " $w ";
	    }
	}
	$Configs{"$config $time"} = $value;
    }
    print "Opening $batch...\n" if $debug;
    if (! open (BATCH, ">> $batch"))
    {
	$status="$FAIL $batch: $!";
	print "$status" if $debug;
	return 0;
    }
    foreach $entry (sort(keys(%Configs)))
    {
	($config, $time) = split(/\s+/,"$entry");
	$plot = "$time $config " . $Configs{"$entry"};
	print "$plot\n";
	print BATCH "$plot\n";
    }
    close BATCH;
    if ($batchfile)
    {
	return 0;
    }
    print "Running: zplotbatch - < $batch\n";
    if ($debug < $D_NoPlot)
    {
	if (! open (BP, "zplotbatch - < $batch 2>&1 |"))
	{
	    $status="$FAIL zplotbatch: $!";
	    print "$status" if $debug;
	    return 0;
	}
	while (<BP>)
	{
	    print;
	    if (/^Images: (.*)$/)
	    {
		$images .= " $1 ";
	    }
	}
	close BP;
	$status = "$FAIL" if ($?);
    }
    if ($batchfile)
    {
	print "Appending plots to $batchfile\n";
	system ("cat $batch >> $batchfile");
    }
    unlink("$batch");

    $pindex = "plotindex \"$project_name\" $ENV{'BATCH_IMAGE_SPOOL'}";
    if ($debug < $D_NoPlot)
    {
	print "Generating plot image index:\n";
	print "$pindex\n";
	system ("$pindex");
    }
    else
    {
	print "Skipping: $pindex\n";
    }

    if (! $enable_ftp)
    {
	print "ftpplots not enabled.\n";
    }
    elsif ($debug >= $D_NoFtp)
    {
	print "Disabled by debug level: ftpplots\n";
    }
    elsif (open (FTP, "ftpplots $images 2>&1 |"))
    {
	while (<FTP>)
	{
	    print;
	}
	close FTP;
	if ($?) {
	    $status = "$FAIL";
	    $result = 0;
	}
    }
    else
    {
	$status="$FAIL: ftp";
	$result = 0;
    }

    $cmd = "(echo \"Subject: zplotd $status, log $plog\"; echo \" \"; cat -)"
	. " | /bin/mail $image_mail_list";
    print "$cmd\n";
#   if ($debug < $D_NoEmail && ! open (MAIL, "| cat - $plog | $cmd"))
    if ($debug < $D_NoEmail && ! open (MAIL, "| $cmd"))
    {
	print "*** Mail failed! ***\n";
    }
    elsif ($debug < $D_NoEmail)
    {
	print MAIL "Images:\n\n";
	$images =~ s/^\s+//;
	foreach $i (split(/\s+/,$images))
	{
	    # Setup a file url first, and if it matches the http path,
	    # then replace the file path with the http url.
	    $url = "file:$i";
	    $url =~ s,file:/net/www,http://www.atd.ucar.edu, ;
	    $parenturl = "file:" . `dirname $i`;
	    chop $parenturl;
	    $parenturl =~ s,file:/net/www,http://www.atd.ucar.edu, ;
	    print MAIL "$parenturl\n";
	    print MAIL "$url\n\n";
	}
	print MAIL "\n";
	print MAIL "Log files:\n";
	print MAIL "file:$log\n";
	print MAIL "file:$plog\n";
	print MAIL "\n";
	close MAIL;
	print "--- Mail sent. ---\n";
    }
    @Queue = ();
    %Pending = ();
    %Displays = ();
    return $result;
}



