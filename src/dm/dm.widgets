!
! Display manager widgets.
!
! $Id: dm.widgets,v 1.6 1993-11-05 23:44:30 corbet Exp $
!

define widget SaveConfig form 'Configuration saver'
	noheader
	label l1 'Save configuration as: '
	blank cname variable dm$config width 150 command 'do_cfg_save'
	button doit 'Do It' command 'do_cfg_save'
	button cancel 'Cancel' command 'popdown #ui$form' color red
	newline
	label l2 'Config directory: '
	blank configdir variable configdir width 300
	newline
	label l3 'PD directory:     '
	blank configpd variable configpd width 300
!	newline
endform


procedure do_cfg_save
	set configdir getftext(ui$form,'configdir')
	set configpd getftext(ui$form,'configpd')
	local configname quote(getftext(ui$form,'cname'))
	
	cfgsave #configname
	popdown #ui$form
endprocedure



define widget pd-menu intmenu 'PD Templates'
	title 'Select a Plot Description'
	line
	entry 'Search PD Directory' 'pddir /zeb/etc/pd'
	line
	entry 'Aircraft'	'formtext #ui$form pdname "aircraft"'
	entry 'Cape'		'formtext #ui$form pdname "cape"' 
	entry 'Pam'		'formtext #ui$form pdname "pam"' 
	entry 'Mesonet'		'formtext #ui$form pdname "mesonet"' 
	entry 'Overlays'	'formtext #ui$form pdname "overlays"'
	entry 'Radar'		'formtext #ui$form pdname "radar"' 
	entry 'Skew-t'		'formtext #ui$form pdname "skewt"'
	entry 'Time Series'	'formtext #ui$form pdname "tseries"' 
	entry 'Winds'		'formtext #ui$form pdname "winds"' 
	entry 'Cross-Sect'	'formtext #ui$form pdname "xsect"' 
	entry 'Empty'		'formtext #ui$form pdname ""' 
	entry 'Empty'		'formtext #ui$form pdname ""' 
	entry 'Empty'		'formtext #ui$form pdname ""' 
	entry 'Empty'		'formtext #ui$form pdname ""' 
	entry 'Empty'		'formtext #ui$form pdname ""' 
endmenu

	
define widget bmap-menu intmenu 'Button Maps'
	title 'Select a Button Map'
	line
	entry 'Aircraft'	'formtext #ui$form bmap "aircraft"'
	entry 'Basic'		'formtext #ui$form bmap "basic"' 
	entry 'Big'		'formtext #ui$form bmap "big"' 
	entry 'Optimizer'	'formtext #ui$form bmap "optimizer"' 
	entry 'Radar'		'formtext #ui$form bmap "radar"' 
	entry 'Sounding'	'formtext #ui$form bmap "sounding"'
endmenu

!
! Window creation.
!
define widget NewWindow form 'Window creation'
	noheader
	label l1 'New window name:  '
	blank wname '--' width 190
	newline
	label l2 'Plot description: '
	blank pdname 'template' width 190
	newline
	label l5 'Button map:       '
	blank bmap 'default' width 190
	newline
	pulldown pdlist 'Select Plot Description' menu 'pd-menu'
	pulldown bmaps 'Select Button Map' menu 'bmap-menu'
	newline 
	label l3 'PD Force?'
	button forcepd 'no' command 'ToggleFormButton forcepd' width 40
!	newline
	label l4 '    '
	button doit 'Create Window' command 'DoWindowCreate'
	button cancel 'Cancel' command 'popdown #ui$form' color red
endform



procedure ToggleFormButton button string
	local current getftext(ui$form,button)
	if (current = 'yes')
		formtext #ui$form #button 'no'
	else
		formtext #ui$form #button 'yes'
	endif
endprocedure


!
! Perform the actual window creation.
!
procedure DoWindowCreate
!
! Get the info out of the form.
!
	local name quote(getftext(ui$form,"wname"))
	local pdname getftext(ui$form,"pdname")
	local bmap getftext(ui$form,"bmap")
	local forcepd getftext(ui$form,"forcepd")
!
! Get the forcepd flag right.
!
	if (forcepd = "yes")
		local forcepd 'forcepd'
	else
		local forcepd ' '
	endif
!
! Create the window.
!
	newwindow #name #pdname #forcepd buttonmap #bmap
	popdown #ui$form
endprocedure



define widget newconfig form 'New configs'
	noheader
	label l1 'New configuration name: '
	newline
	blank cname 'new' width 210
	newline
	label l2 'Copy from: '
	newline
	blank oldname variable dm$config width 210
	newline
	button doit 'Create Configuration' command 'DoConfigCreate'
	button cancel 'Cancel' command 'popdown #ui$form' color red
endform


procedure DoConfigCreate
	local cname getftext(ui$form,'cname')
	local ccopy getftext(ui$form,'oldname')
	newconfig #cname #ccopy
	popdown #ui$form
endprocedure


!
! The overall configuration editing widget
!
define widget ConfigEdit form 'config edit'
	noheader
	label l1 'Configuration Editing'
	newline
	button zap 'Zap' width 75 command 'popdown #ui$form' color red
	button help 'Help' width 75 command 'help editdconfig'
	newline
	button b1 'New Configuration' width 160 command 'popup newconfig'
	newline
	button b2 'New Window' width 160 command 'popup NewWindow'
	newline
	button b2a 'Delete Window' width 160 command 'popup ZorchWindow'
	newline
	button b3 'Save Configuration' width 160 command 'popup SaveConfig'
endform



!
! Definitions for the position entry widget.
!

define widget enter form "Entry widget"
	noheader
!
! The platform selection line.
!
	label l_plat "Platform:"
	pulldown platform 'n308d' menu 'plats' width 100
	label space ' ' width 100
	button exit 'Zap' color red command 'popdown #ui$form'
	newline
!
! Positions here.
!
	label l_lat 'Lat:'
	blank lat_deg '-9' width 40
	blank lat_min '-25' width 40
	label l_lon 'Lon:'
	blank lon_deg '159' width 40
	blank lon_min '58' width 40
	label l_alt 'Alt:'
	blank alt '0.0' width 60
	newline
!
! Let them put in a time.
!
	label l_time 'Time:'
	blank time 'now' width 200
	newline
!
! Options.
!
	button enter 'Enter point' command 'DoEnter false'
	button overw 'Change last point' command 'DoEnter true'
	newline
!
! And a gripe window.
!
	label gripe ' ' width 300 color red
endform


procedure DoEnter overwrite bool
!
! Pull info from the widget.
!
	local plat concat('l_',getftext(ui$form,'platform'))
	local lat_deg getftext(ui$form,'lat_deg')
	local lon_deg getftext(ui$form,'lon_deg')
	local lat_min getftext(ui$form,'lat_min')
	local lon_min getftext(ui$form,'lon_min')
	local alt getftext(ui$form,'alt')
! 
! Do the entry.
!
	if (overwrite)
		enter #plat #lat_deg #lat_min #lon_deg #lon_min #alt
	else
		local when getftext(ui$form,'time')
		enter #plat #lat_deg #lat_min #lon_deg #lon_min #alt #when
	endif
endprocedure




!
! Interface to the "kill" function.
!
define widget ZorchWindow form 'Window zapper'
	noheader
	label l1 'Delete a window.'
	newline
	label l2 'Enter window name below, or click on "select with mouse"'
	newline
	label l3 'to use the mouse.'
	newline
	label l4 'Window name:'
	blank victim '--' width 150
	button mouse 'Select with mouse' command 'ZW_pick'
	newline
	button Reaper 'Do it' color red command 'ZW_Zap'
	button reprieve 'Cancel' command 'popdown #ui$form'
endform



!
! Select a victim with the mouse.
!
procedure ZW_pick
	set victim '--'
	pickwin victim
	formtext #ui$form victim #victim
endprocedure


!
! Do it.
!
procedure ZW_Zap
	local victim getftext(ui$form,'victim');
	kill #victim
	popdown #ui$form
endprocedure



!
! Standardized "put" routines.
!

!
! Put a fully-modified component out to a window.
!
procedure sendout comp string target string
!
! Get the target window if unspecified
!
	if (target = "pick")
		set target_win "none"
		pickwin target_win
		if (target_win = "none")	! They picked root or something
			beep
			return
		endif
	else
		set target_win target
	endif
!
! Figure out the proper positioning for this component.
!
	local rep pd_param(comp, comp, 'representation', 'string')
	if (rep = 'raster' or rep = 'filled-contour')
		local position '1'
	else
		local position '0'
	endif
!
! Now do it.
!
	sound chord
	add #comp #comp #target_win #position
endprocedure


procedure putc1 comp string param string value string
!
! Just mung in the parameter and ship it out.
!
	parameter #comp #comp #param #value
	sendout #comp 'pick'
endprocedure


procedure putc2 comp string p1 string v1 string p2 string v2 string
!
! Just mung in the parameter and ship it out.
!
	parameter #comp #comp #p1 #v1
	parameter #comp #comp #p2 #v2
	sendout #comp 'pick'
endprocedure


procedure putc3 comp string p1 string v1 string p2 string v2 string p3 string v3 string
!
! Just mung in the parameter and ship it out.
!
	parameter #comp #comp #p1 #v1
	parameter #comp #comp #p2 #v2
	parameter #comp #comp #p3 #v3
	sendout #comp 'pick'
endprocedure




!
! Try to figure out what to do with a scalar field.
!
procedure PutScalar platform string field string
!
! Start by finding a window.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
!
! Now figure out what sort of window this is.
! If it's a CAP plot, send it out as a track (for now)
!
	local ptype pd_param(target_win, 'global', 'plot-type', 'string')
	if (ptype = 'CAP')
!		putc2 p_track 'platform' #platform 'field' #field
		parameter p_track p_track platform #platform
		parameter p_track p_track field #field
		sendout p_track #target_win
		return
	endif
!
! If it's NOT an xygraph, we don't know what to do.
!
	if (ptype <> 'xygraph')
		message 'I can not cope with rep "#"' ptype
		beep
		return
	endif
!
! OK.  Next step is to figure out if there is already a component out there
! which is displaying this field.
!
	local comps pd_complist(target_win)
	local found false
	local leftaxis true
	local ntrace 0
	foreach comp #comps
		local leftaxis (not leftaxis)
		if (comp <> 'global' and not found)
			local flds pd_param(target_win,comp,'y-field','string')
			if (flds = field)
				local ourcomp comp
				local found true
			endif
		endif
		local ntrace (ntrace + nvalue(target_win, comp, 'platform'))
	endfor
!
! If we found it, just add this info to it.
!
	if (found)
		parameter #target_win global plot-hold true
		local plats pd_param(target_win, ourcomp, 'platform', 'string')
		local plats quote(concat3(plats, ',', platform))
		parameter #target_win #ourcomp platform #plats
		local clrs pd_param(target_win,ourcomp,'field-color','string')
		local fcolor NthColor('xygraph', ntrace - 1)
		local clrs quote(concat3(clrs, ',', fcolor))
		parameter #target_win #ourcomp field-color #clrs
		parameter #target_win global plot-hold false
!
! Otherwise we need to add a new component.
	else
		parameter p_xytrace p_xytrace platform #platform
		parameter p_xytrace p_xytrace y-field #field
		if (leftaxis)
			parameter p_xytrace p_xytrace axis-left true
			parameter p_xytrace p_xytrace axis-right false
		else
			parameter p_xytrace p_xytrace axis-left false
			parameter p_xytrace p_xytrace axis-right true
		endif
		if (ntrace > 1)
			parameter p_xytrace p_xytrace axis-l-grid-intensity 0
		else
			parameter p_xytrace p_xytrace axis-l-grid-intensity 0.7
		endif
		local fcolor NthColor('xygraph', ntrace - 1)
		parameter p_xytrace p_xytrace 'field-color' #fcolor
		add p_xytrace p_xytrace #target_win
	endif
endprocedure
