!
! Display manager widgets.
!
! $Id: dm.widgets,v 1.39 2000-12-05 19:05:05 granger Exp $
!

define widget SaveConfig form 'Configuration saver'
	noheader
	label l1 'Save configuration as: '
	blank cname variable dm$config width 150 command 'do_cfg_save'
	button help 'Help' command 'help ec-save'
	button doit 'Do It' command 'do_cfg_save'
	button cancel 'Cancel' command 'popdown #ui$form' color red
	newline
	label l2 'Config directory: '
	blank configdir variable configdir width 350
endform


procedure do_cfg_save
	set configdir getftext(ui$form,'configdir')
	local configname quote(getftext(ui$form,'cname'))
	
	cfgsave #configname
	popdown #ui$form
endprocedure



!
! The new version of the window creation widget
!
define widget cw_wintypes intmenu 'Default version'
       title 'Window types'
       line
       entry 'Constant Altitude Plot' 'cw_type "Constant altitude"'
       entry 'Time-series' 'cw_type "Time series"'
       entry 'Skew-t' 'cw_type "Skew-t"'
       entry 'Wind profile' 'cw_type "Wind profile"'
endmenu

procedure cw_type type string
	local qtype quote(type)
	formtext #ui$form wtype #qtype
endprocedure

define widget NewWindow form 'New window'
	noheader
	label Title 'New window creation'
	newline
	label l1 'Window name:'
	blank name '--' width 100
!	newline
	label l2 'type:'
	pulldown wtype 'Constant altitude' menu cw_wintypes width 140
	newline
	button help 'Help' command 'help ec-add'
	button create 'Create window' command 'DoNewWindow'
	button zap 'Cancel' command 'popdown #ui$form' color red
	label gripe ' ' width 200 color red
endform

procedure DoNewWindow
!
! Make sure they gave us a name.
!
	local name getftext(ui$form, 'name')
	if (name = '--')
		formtext #ui$form gripe 'Please give a window name'
		beep
		return
	endif
!
! See if it's one of the types we know.
!
	local t getftext(ui$form, 'wtype')
	if (t = 'Constant altitude')
		set nw_pd 'cap-template'
		set nw_bmap 'big'
	elseif (t = 'Time series')
		set nw_pd 'tseries-template'
		set nw_bmap 'xyplot'
	elseif (t = 'Wind profile')
		set nw_pd 'wind-template'
		set nw_bmap 'xyplot'
	elseif (t = 'Skew-t')
		set nw_pd 'skewt-template'
		set nw_bmap 'sounding'
	elseif (t = 'Time-height profile')
		set nw_pd 'time-height-template'
		set nw_bmap 'xyplot'
	elseif (t = 'RASS profile')
		set nw_pd 'rass-template'
		set nw_bmap 'xyplot'
	elseif (t = 'Line Plot')
		set nw_pd 'lineplot-template'
		set nw_bmap 'xyplot'
!
! Hmm...let's see if somebody else knows about it.
!
	else
		local qt quote(t)
		pcall ProjectNewWindow #qt
	endif
!
! Time to do it.
!
	local name getftext(ui$form, 'name')
	newwindow #name #nw_pd forcepd buttonmap #nw_bmap
	popdown #ui$form
endprocedure





define widget newconfig form 'New configs'
	noheader
	label l1 'New configuration name: '
	newline
	blank cname 'new' width 210
	newline
	label l2 'Copy from: '
	newline
	blank oldname variable dm$config width 210
	newline
	button help 'Help' command 'help ec-start'
	button doit 'Create Configuration' command 'DoConfigCreate'
	button cancel 'Cancel' command 'popdown #ui$form' color red
endform


procedure DoConfigCreate
	local cname getftext(ui$form,'cname')
	local ccopy getftext(ui$form,'oldname')
	newconfig #cname #ccopy
	popdown #ui$form
endprocedure


!
! The overall configuration editing widget
!
define widget ConfigEdit form 'config edit'
	noheader
	label l1 'Configuration Editing'
	newline
	button zap 'Zap' width 75 command 'popdown #ui$form' color red
	button help 'Help' width 75 command 'help editdconfig'
	newline
	button b1 'New Configuration' width 160 command 'popup newconfig'
	newline
	button b2 'New Window' width 160 command 'popup NewWindow'
	newline
	button b2a 'Delete Window' width 160 command 'popup ZorchWindow'
	newline
	button b3 'Save Configuration' width 160 command 'popup SaveConfig'
endform


require enter-widget

!
! Interface to the "kill" function.
!
define widget ZorchWindow form 'Window zapper'
	noheader
	label l1 'Delete a window.'
	newline
	label l2 'Enter window name below, or click on "select with mouse"'
	newline
	label l3 'to use the mouse.'
	newline
	label l4 'Window name:'
	blank victim '--' width 150
	button mouse 'Select with mouse' command 'ZW_pick'
	newline
	button help 'Help' command 'help ec-delete'
	button Reaper 'Do it' color red command 'ZW_Zap'
	button reprieve 'Cancel' command 'popdown #ui$form'
endform



!
! Select a victim with the mouse.
!
procedure ZW_pick
	set victim '--'
	pickwin victim
	formtext #ui$form victim #victim
endprocedure


!
! Do it.
!
procedure ZW_Zap
	local victim getftext(ui$form,'victim');
	kill #victim
	popdown #ui$form
endprocedure



!
! Standardized "put" routines.
!

!
! Put a fully-modified component out to a window.
!
procedure sendout comp string target string
!
! Get the target window if unspecified
!
	if (target = "pick")
		set target_win "none"
		pickwin target_win
		if (target_win = "none")	! They picked root or something
			beep
			return
		endif
	else
		set target_win target
	endif
!
! Figure out the proper positioning for this component.
!
	local rep pd_param(comp, comp, 'representation', 'string')
	if (rep = 'raster' or rep = 'filled-contour' or rep = 'polar')
		local position '1'
	else
		local position '0'
	endif
!
! Now do it.
!
	sound chord
	add #comp #comp #target_win #position
endprocedure

!
! Alter 0-4 parameters in an existing pd component and ship it out 
! to a selected window
!
procedure putc0 comp string
	sendout #comp 'pick'
endprocedure

procedure putc1 comp string param string value string
	parameter #comp #comp #param #value
	sendout #comp 'pick'
endprocedure


procedure putc2 comp string p1 string v1 string p2 string v2 string
	parameter #comp #comp #p1 #v1
	parameter #comp #comp #p2 #v2
	sendout #comp 'pick'
endprocedure


procedure putc3 comp string p1 string v1 string p2 string v2 string p3 string v3 string
	parameter #comp #comp #p1 #v1
	parameter #comp #comp #p2 #v2
	parameter #comp #comp #p3 #v3
	sendout #comp 'pick'
endprocedure

procedure putc4 comp string p1 string v1 string p2 string v2 string p3 string v3 string p4 string v4 string
	parameter #comp #comp #p1 #v1
	parameter #comp #comp #p2 #v2
	parameter #comp #comp #p3 #v3
	parameter #comp #comp #p4 #v4
	sendout #comp 'pick'
endprocedure


procedure ShipScalar platform string field string target_win string
!
! Start by figuring out if there is a special command for adding 
! to this window.  If there is, we just pass control off there and
! forget about it.
!
	local qfield quote(field)
	local ptype PDParam(target_win, 'global', 'plot-type')
	local addcmd PDParam(target_win, 'global', 'add-data-command')
	if (addcmd = '(Undefined)')
		local qual concat(ptype,'-add-data-command')
		local addcmd PDParam('defaults','defaults',qual)
	endif
	if (addcmd <> '(Undefined)')
		require #addcmd
		#addcmd #platform #qfield #target_win
		return
	endif
!
! Now figure out what sort of window this is.
! If it's a CAP plot, send it out as a track (for now)
!
	if (ptype = 'CAP')
		parameter p_track p_track platform #platform
		parameter p_track p_track field #qfield
		sendout p_track #target_win
		return
	endif
	if (ptype = 'skewt')
		local addcmd "sk-add-data"
		require #addcmd
		#addcmd #platform #qfield #target_win
		return
	endif
!
! If it's NOT an xygraph, we don't know what to do.
!
	if (ptype <> 'xygraph')
		message 'I can not cope with plot-type "#"' ptype
		beep
		return
	endif
!
! OK.  Next step is to figure out if there is already a component out there
! which is displaying this field.
!
	local comps pd_complist(target_win)
	local found false
	local leftaxis true
	local ntrace 0
	foreach comp #comps
		local leftaxis (not leftaxis)
		if (comp <> 'global' and not found)
			local flds pd_param(target_win,comp,'y-field','string')
			if (flds = field)
				local ourcomp comp
				local found true
			endif
		endif
		local ntrace (ntrace + nvalue(target_win, comp, 'platform'))
	endfor
!
! If we found it, just add this info to it.
!
	if (found)
		parameter #target_win global plot-hold true
		local plats pd_param(target_win, ourcomp, 'platform', 'string')
		local plats quote(concat3(plats, ',', platform))
		parameter #target_win #ourcomp platform #plats
		local clrs pd_param(target_win,ourcomp,'field-color','string')
		local fcolor NthColor('xygraph', ntrace - 1)
		local clrs quote(concat3(clrs, ',', fcolor))
		parameter #target_win #ourcomp field-color #clrs
		parameter #target_win global plot-hold false
!
! Otherwise we need to add a new component.
!
	else
		set ntrace (ntrace + 1)
		parameter p_xytrace p_xytrace platform #platform
		parameter p_xytrace p_xytrace y-field #qfield
		if (leftaxis)
			parameter p_xytrace p_xytrace axis-left true
			parameter p_xytrace p_xytrace axis-right false
		else
			parameter p_xytrace p_xytrace axis-left false
			parameter p_xytrace p_xytrace axis-right true
		endif
		if (ntrace > 1)
			parameter p_xytrace p_xytrace axis-l-grid-intensity 0
		else
			parameter p_xytrace p_xytrace axis-l-grid-intensity 0.7
		endif
		local fcolor NthColor('xygraph', ntrace - 1)
		parameter p_xytrace p_xytrace 'field-color' #fcolor
		add p_xytrace p_xytrace #target_win
	endif
endprocedure




!
! Try to figure out what to do with a scalar field.
!
procedure PutScalar platform string field string
!
! Start by finding a window.
!
	set target_win "none"
	pickwin target_win
	if (target_win = "none")	! They picked root or something
		beep
		return
	endif
	ShipScalar #platform #field #target_win
endprocedure


! Older projects expect it to be here on startup.
require hardcopy-widget

!
! Stuff for the old "create window" widget.
!
define widget pd-menu intmenu 'PD Templates'
	title 'Select a Plot Description'
	line
	entry 'Constant altitude plot' 'cw_setpd cap-template'
	entry 'Time-series plot' 'cw_setpd tseries-template'
	entry 'Skew-t plot' 'cw_setpd skewt-template'
	entry 'Wind profile' 'cw_setpd wind-template'
endmenu



procedure cw_setpd pd string
	formtext #ui$form pdname #pd
endprocedure

	
define widget bmap-menu intmenu 'Button Maps'
	title 'Select a Button Map'
	line
	entry 'Basic'		'formtext #ui$form bmap "basic"' 
	entry 'Radar'		'formtext #ui$form bmap "radar"' 
	entry 'Sounding'	'formtext #ui$form bmap "sounding"'
	entry 'Time series'	'formtext #ui$form bmap "xyplot"'
endmenu

!
! Window creation.
!
define widget OldNewWindow form 'Window creation'
	noheader
	label l1 'New window name:  '
	blank wname '--' width 190
	newline
	label l2 'Plot description: '
	blank pdname 'cap-template' width 190
	newline
	label l5 'Button map:       '
	blank bmap 'default' width 190
	newline
	pulldown pdlist 'Plot Descriptions ->' menu 'pd-menu'
	pulldown bmaps 'Button Maps ->' menu 'bmap-menu'
	newline 
	label l3 'PD Force?'
	button forcepd 'no' command 'ToggleFormButton forcepd' width 40
!	newline
	label l4 '    '
	button doit 'Create Window' color red command 'DoOldWindowCreate'
	button cancel 'Cancel' command 'popdown #ui$form' color red
endform

procedure ToggleFormButton button string
	local current getftext(ui$form,button)
	if (current = 'yes')
		formtext #ui$form #button 'no'
	else
		formtext #ui$form #button 'yes'
	endif
endprocedure

!
! Perform the actual window creation.
!
procedure DoOldWindowCreate
!
! Get the info out of the form.
!
	local name quote(getftext(ui$form,"wname"))
	local pdname getftext(ui$form,"pdname")
	local bmap getftext(ui$form,"bmap")
	local forcepd getftext(ui$form,"forcepd")
!
! Make sure they gave a name.
!
	if (name = '"--"')
		beep
		return
	endif
!
! Get the forcepd flag right.
!
	if (forcepd = "yes")
		local forcepd 'forcepd'
	else
		local forcepd ' '
	endif
!
! Create the window.
!
	newwindow #name #pdname #forcepd buttonmap #bmap
	popdown #ui$form
endprocedure


!
! A little tweaker that gets endpoints to all cross section windows.
!
procedure AllXSect x0 string y0 string x1 string y1 string
	windowlist wins
	foreach window #wins
		local pt PDParam(window, 'global', 'plot-type')
		if (pt = 'xsect')
			local ep1 quote(concat3(x0, ',', y0))
			local ep2 quote(concat3(x1, ',', y1))
			parameter #window global plot-hold true
			parameter #window global left-endpoint #ep1
			parameter #window global right-endpoint #ep2
			parameter #window global plot-hold false
		endif
	endfor
endprocedure

procedure dm_widgets_id
	local '$Id: dm.widgets,v 1.39 2000-12-05 19:05:05 granger Exp $'
endprocedure
