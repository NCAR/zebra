!
! Widget definitions for the graphics process.
!
! Most widgets have now been moved out of here, finding their home instead
! in the library directory and brought in through the require mechanism.
!
! $Id: GraphProc.widgets,v 1.11 1994-04-26 20:03:39 corbet Exp $
!
set ui$initial_state 'initial'


!
! Toggle an enable button.
!
procedure ToggleEnable button string
	local current getftext(ui$form,button)
	if (current = "Enabled")
		formtext #ui$form #button "Disabled"
	else
		formtext #ui$form #button "Enabled"
	endif
endprocedure

!
! The standard left button menu, which should get used for most data
! components.
!
define widget standard-cap-left-menu intmenu "leftmenu"
	title 'Overlay Operations'
	line
	entry 'Adjust Limits' 'i_adjust limit-proc'
	entry 'Spatial Offset options' 'require offsets; popup offsets'
	line
	entry 'Raise to top' 'move #icon_component 0'
	entry 'Move to bottom' 'move #icon_component 1'
	entry 'Disable/reenable' 'ToggleBoolean "disable"' \
		(PDParam(icon_component,"disable") = "true")
	entry 'Remove' 'i_remove_component'
endmenu

!
! A minimal version for places where the other options don't make sense.
!
define widget minimal-cap-left-menu intmenu "leftmenu"
	title 'Overlay Operations'
	line
	entry 'Raise to top' 'move #icon_component 0'
	entry 'Move to bottom' 'move #icon_component 1'
	entry 'Disable/reenable' 'ToggleBoolean "disable"' \
		(PDParam(icon_component,"disable") = "true")
	entry 'Remove' 'i_remove_component'
endmenu


!
! Remove a component.
!
procedure i_remove_component
	dm concat4('remove ', ourname, ' ', icon_component)
endprocedure


!
! Adjust the limits on a component.
!
procedure i_adjust procparam string
	local rep PDParam(icon_component, "representation")
	local proc PDSearch(icon_component, procparam, rep)
	if (proc <> "(Undefined)")
		#proc #icon_component
	else
		dm "beep"
	endif
endprocedure


!
! The arrow scale adjuster.
!
procedure adj_arrow_scale comp string
	local current pd_param(icon_component, "arrow-scale", "string")
	activate singlefloat #comp 'arrow-scale' "Arrow Scale: " #current
endprocedure


!
! Toggle an arbitrary boolean parameter.  This guy expects to be called
! out of a menu, with icon_component set.  If the parameter does not
! exist, it is set to true.
!
procedure ToggleBoolean param string
	local current (pd_param (icon_component, param, "string") = "true")
	if (current)
		parameter #icon_component #param false
	else
		parameter #icon_component #param true
	endif
endprocedure


!
! Line width menu for maps and such.
!
define widget LineWidth intmenu 'line width'
	title 'Line Width'
	line
	entry 'Thin' 'parameter #icon_component line-width 0'  \
		(pd_param (icon_component, "line-width", "string") = "0" or \
                 pd_param(icon_component,"line-width","string") ="(Undefined)")
	entry 'Medium' 'parameter #icon_component line-width 2' \
		(pd_param (icon_component, "line-width", "string") = "2")
	entry 'Thick' 'parameter #icon_component line-width 3' \
		(pd_param (icon_component, "line-width", "string") = "3")
	entry 'Extra Thick' 'parameter #icon_component line-width 6' \
		(pd_param (icon_component, "line-width", "string") = "6")
endmenu


!
! Set the constant altitude plot limits to the given values.
!
procedure DoZoom xmin string xmax string ymin string ymax string
	parameter global x-min #xmin
	parameter global x-max #xmax
	parameter global y-min #ymin
	parameter global y-max #ymax
endprocedure


!
! Commands to be executed out of the DataAvailable menu.  The invocation
! sequence is:
!
!	DAVCommand  platform  time
!
! Where platform and time correspond to the menu entry which was selected.
!
! The default action is to switch to the given platform and time, in 
! history mode.
!

procedure DefaultDataAvail platform string when string
!
! Switch to the given platform; however, let's check to see that we are
! not already on that one -- we can avoid frame cache invalidations that
! way.
!
	if (pd_param (icon_component, "platform", "string") <> platform)
		parameter #icon_component platform #platform
	endif
!
! Now drop into history mode and display this time.
!
	parameter global plot-mode history
	parameter global plot-time #when
endprocedure



!
! Global menu stuff.
!
define widget GlobalTopAnnot intmenu 'Annotation colors'
	title 'Top Annotation'
	line
	submenu 'Color' 'simple-color'
	line
	entry 'Small' 'TopAnnotSize 12' \
		(pd_param(icon_component, "ta-scale", "string") = "12")
	entry 'Medium' 'TopAnnotSize 20' \
		(pd_param(icon_component, "ta-scale", "string") = "20")
	entry 'Large' 'TopAnnotSize 24' \
		(pd_param(icon_component, "ta-scale", "string") = "24")
	line
	entry 'Color Match On' 'color_match true'  \
		(pd_param (icon_component, "ta-color-match", "string") = "true")
	entry 'Color Match Off' 'color_match false'  \
		(pd_param(icon_component, "ta-color-match", "string") = "false")
endmenu


procedure TopAnnotSize size string
	parameter global ta-scale #size
endprocedure




!
! Image cranking
!
define widget imagecrank form 'Image cranker'
	noheader
	popup 'ic-popup'

	label title 'Batch image production'
	button zap 'Dismiss' command 'popdown #ui$form' color red
	newline

	label l1 'Begin time:'
	blank begin 'begin' width 150
!	newline

	label l2 'End time:'
	blank end 'end' width 150
	newline

	label l3 'Step:'
	blank step '60' width 80
	pulldown units 'minutes' menu ic-units
!	newline

	label l5 'File:'
	blank file 'image-%d-%d.gif' width 200

	label l4 'Format: '
	pulldown format 'gif' menu ic-format
	newline

	button doit 'Generate' command 'ic-generate'
	button abort 'Abort' command 'ic-abort' color red
	label gripe ' ' color red width 400
enddef



procedure ic-popup
	local f ui$form
	local pt PDParam('global','plot-time')

	formtext #f begin #pt
	formtext #f end #pt
	formtext #f gripe 'Make sure window is unobscured before starting'
endprocedure



define widget ic-units intmenu 'units'
	title 'Time step units'
	line
	entry 'Seconds' 'formtext #ui$form units "seconds"'
	entry 'Minutes' 'formtext #ui$form units "minutes"'
	entry 'Hours' 'formtext #ui$form units "hours"'
	entry 'Days' 'formtext #ui$form units "days"'
endmenu



define widget ic-format intmenu 'formats'
	title 'Output formats'
	line
	entry 'GIF' 'formtext #ui$form format "gif"'
	entry 'X window dump' 'formtext #ui$form format "xwd"'
	entry 'PostScript' 'formtext #ui$form format "pscolor"'
endmenu





!
! Actually make a phone book
!
procedure ic-generate
	set ICAbort false

	enqueue display 'ic-next'
endprocedure

!
! Generate next frame
!
procedure ic-next
	local f ui$form
	if (ICAbort)
		formtext #f gripe 'Aborted -- hit "Generate" to resume'
		return
	endif
	local pt getftext(f,'begin')
!
! Tell it to do the next plot.
!
	formtext #ui$form gripe 'Generating...'
	parameter global plot-mode history
	parameter global plot-time #pt
	enqueue whenever 'ic-dump'
!
! Figure out the next time.
!
	local dpt #pt
	local step getftext(f,'step')
	local units getftext(f,'units')
	if (units = 'seconds')
		local incr concat3('(',step,'/(3600*24.0))')
	elseif (units = 'minutes')
		local incr concat3('(',step,'/(60*24.0))')
	elseif (units = 'hours')
		local incr concat3('(',step,'/24.0)')
	else
		local incr step
	endif
	local dincr #incr
	local dpt (dpt + dincr)
	local et getftext(f,'end')
	local det #et
	if (dpt <= det)
		enqueue whenever 'ic-next'
	else
		formtext #f gripe 'Done.'
	endif
!
! Update the form
!
	local pt string(dpt)
	formtext #f begin #pt
endprocedure



procedure ic-dump
	local f ui$form
	if (ICAbort)
		formtext #f gripe 'Aborted -- hit "Generate" to continue'
		return
	endif
	formtext #f gripe 'Dumping...'
	local fmt getftext(f,'format')
	local file getftext(f,'file')
	imgdump #fmt #file
	formtext #f gripe 'Done.'
endprocedure


procedure ic-abort
	set ICAbort true
endprocedure
