/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _ZEBRA_H_RPCGEN
#define	_ZEBRA_H_RPCGEN

#include <rpc/rpc.h>
/*
 * $Id: zebra.h,v 2.1 1997-02-10 20:19:57 granger Exp $
 *
 * XDR definitions and interface for basic zebra types and structures
 */

/*
 * Here is the new zebra time format.  This looks suspiciously like the
 * BSD timeval structure....
 */

struct ZebraTime {
	long zt_Sec;
	long zt_MicroSec;
};
typedef struct ZebraTime ZebraTime;

typedef ZebraTime ZebTime;
/*
 * Locations.
 */

struct Location {
	float l_lat;
	float l_lon;
	float l_alt;
};
typedef struct Location Location;
/*
 * Scale and bias info for integer-encoded fields.
 */

struct ScaleInfo {
	float s_Scale;
	float s_Offset;
};
typedef struct ScaleInfo ScaleInfo;
/*
 * Regularly-spaced grids in geographical coordinates
 */
	/* X dimension spacing		*/
	/* Y (north/south) spacing	*/
	/* Vertical spacing		*/
	/* Dimensions			*/

struct RGrid {
	float rg_Xspacing;
	float rg_Yspacing;
	float rg_Zspacing;
	int rg_nX;
	int rg_nY;
	int rg_nZ;
};
typedef struct RGrid RGrid;
/*
 * Altitude units.  If you add new units here, be sure to add associated
 * units strings and formats to altunits.c.
 */

enum AltUnitType {
	AU_kmMSL = 0,
	AU_mMSL = 1,
	AU_kmAGL = 2,
	AU_mAGL = 3,
	AU_mb = 4,
	AU_sigma = 5,
	AU_level = 6
};
typedef enum AltUnitType AltUnitType;

#include "defs.h"	/* so programs can include zebra.h first instead */


/* the xdr functions */
extern bool_t xdr_ZebraTime();
extern bool_t xdr_ZebTime();
extern bool_t xdr_Location();
extern bool_t xdr_ScaleInfo();
extern bool_t xdr_RGrid();
extern bool_t xdr_AltUnitType();

#endif /* !_ZEBRA_H_RPCGEN */
