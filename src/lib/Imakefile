/* -*- C -*-
 * Imakefile for the zebra library.
 */
/*		Copyright (C) 1987,88,89,90,91,92 by UCAR
 *	University Corporation for Atmospheric Research
 *		   All rights reserved
 *
 * No part of this work covered by the copyrights herein may be reproduced
 * or used in any form or by any means -- graphic, electronic, or mechanical,
 * including photocopying, recording, taping, or information storage and
 * retrieval systems -- without permission of the copyright owner.
 * 
 * This software and any accompanying written materials are provided "as is"
 * without warranty of any kind.  UCAR expressly disclaims all warranties of
 * any kind, either express or implied, including but not limited to the
 * implied warranties of merchantibility and fitness for a particular purpose.
 * UCAR does not indemnify any infringement of copyright, patent, or trademark
 * through use or modification of this software.  UCAR does not provide 
 * maintenance or updates for its software.
 */
/* $Id: Imakefile,v 1.36 2001-01-06 00:01:39 granger Exp $ */

#if !HasWritev
WRITEVOBJ=writev.o
WRITEVSRC=writev.c
#else
WRITEVOBJ=
WRITEVSRC=
#endif

#ifdef notdef
INCLUDES = -I.		/* so that <> includes can be found */
#endif

/*
 * Graphics widget needs to know whether to try shared memory, and the
 * ConfigVars routines need to the various default directory paths.
 */
DEPEND_DEFINES = $(SHMDEFINES) $(DIRDEFINES) $(XINCLUDES) $(RDSSINCLUDES)

/*
 * Sources
 */
TESTSRCS = cvt_test.c re_test.c msg_test.c

CSRCS = alarmwidget.c altunits.c barb.c Bitmaps.c byteorder.c cmd_proto.c \
	cmd_exec.c ConfigVars.c ConfigUI.c convert.c GraphicsW.c ImageXfr.c \
	Buttons.c msg_BCast.c msg_lib.c netread.c Parse.c pdlib.c pdretrv.c \
	pdaux.c RLEncode.c Sound_lib.c TCvt.c TInterp.c timer_lib.c twidget.c \
	vector.c $(WRITEVSRC) FindFile.c zl_regex.c dm_lib.c $(TESTSRCS) \
	location.c version.c zl_symbol.c zl_string.c T_Expect.c T_Profile.c \
	zebra_rpc_xdr.c map.c map_xdr.c

CCSRCS = BTree.cc BTreeFile.cc BlockFile.cc FreeList.cc Journal.cc XDR.cc \
	Logger.cc Format.cc Buffer.cc AuxBlock.cc BlockObject.cc \
	SerialBuffer.cc SerialStream.cc Serializable.cc \
	T_Block.cc dbf.cc T_BTree.cc ZTime.cc ztime_test.cc

SRCS = $(CSRCS) ($CCSRCS)

/*
 * Source for C++ templates should go here as well as in CCSRCS, with no
 * associated .o entries in OBJS below.  These files will be installed into 
 * the header directory.
 */
TEMPLATESRCS = BTree.cc BTreeFile.cc

/*
 * Objects
 */
XOBJS = Bitmaps.o barb.o vector.o Buttons.o
XUIOBJS = alarmwidget.o twidget.o dm_lib.o 
UIOBJS = pdlib.o pdretrv.o pdaux.o cmd_proto.o
#ifdef notdef
UISRCS = $(UIOBJS:.o=.c)
#endif
CFGOBJS = ConfigVars.o ConfigUI.o 
CFGSRCS = $(CFGOBJS:.o=.c)

SPECIAL_OBJS = $(XOBJS) $(XUIOBJS) $(UIOBJS) $(CFGOBJS)

OBJS = $(SPECIAL_OBJS) altunits.o byteorder.o cmd_exec.o convert.o \
	GraphicsW.o ImageXfr.o msg_BCast.o msg_lib.o netread.o Parse.o \
	RLEncode.o Sound_lib.o TCvt.o TInterp.o timer_lib.o $(WRITEVOBJ) \
	FindFile.o zl_regex.o zebra_rpc_xdr.o map_xdr.o map.o location.o \
	version.o zl_symbol.o zl_string.o T_Expect.o T_Profile.o \
	BlockFile.o FreeList.o XDR.o Buffer.o SerialBuffer.o Logger.o \
	SerialStream.o Serializable.o AuxBlock.o Journal.o BlockObject.o \
	Format.o ZTime.o

TESTOBJS = cvt_test.o re_test.o msg_test.o ztime_test.o

CHEADERS = bitmaps.h copyright.h defs.h GraphicsW.h GraphicsWP.h message.h \
	pd.h timer.h ImageXfr.h zl_regex.h dm.h twidget.h byteorder.h \
	draw.h version.h zl_symbol.h zl_param.h Test.h zebra.h zebra_rpc.h \
	map.h zl_mtio.h

DOCXX_HEADERS = Buffer.hh SerialBuffer.hh SerialStream.hh \
	Serializable.hh AuxBlock.hh XDR.hh BlockObject.hh

CCHEADERS = BTree.hh BTreeFile.hh BTreeStats.hh BlockFile.hh \
	Format.hh SerialZTime.hh Serialize.hh Logger.hh \
	ZTime.hh ZTime.h $(DOCXX_HEADERS) 

HEADERS = $(CHEADERS) $(CCHEADERS) $(TEMPLATESRCS)

RPCZEBRA = zebra_rpc.h zebra_rpc_xdr.c
ZEBRA.x = zebra_rpc.x

RPCMAP = map.h map_xdr.c
MAP.x = map.x

RPCTARGETS = $(RPCZEBRA) $(RPCMAP)
SOURCES.x = $(ZEBRA.x) $(MAP.x)

/*
 * Private internal header files
 */
PHEADERS = setup.h BlockFileP.hh

DISTFILES = $(SRCS) writev.c $(HEADERS) Imakefile $(PHEADERS) $(SOURCES.x)

INCLUDES = $(RDSSINCLUDES)

NormalLibraryTarget (Zebra, $(OBJS))

$(OBJS): $(RPCTARGETS)

SpecialObjectRule($(XUIOBJS),/**/,$(XINCLUDES))
SpecialObjectRule($(XOBJS),/**/,$(XINCLUDES))
#ifdef notdef
SpecialObjectRule($(UIOBJS),$(UISRCS),$(RDSSINCLUDES))
#endif
SpecialObjectRule($(CFGOBJS),$(CFGSRCS),$(DIRDEFINES))
SpecialObjectRule(GraphicsW.o,GraphicsW.c GraphicsW.h GraphicsWP.h,$(SHMDEFINES) $(XINCLUDES))

/*
 * rpcgen rules
 */
XDRTarget(zebra_rpc)
XDRTarget(map)

InstallLibrary (Zebra, $(LIBDIR))

install::
	(cd $(LIBDIR); $(RM) libZeb.a; $(LN) libZebra.a libZeb.a)

BuildIncludesTop ($(HEADERS))
InstallMultipleFlags($(HEADERS),$(INCDIR),$(INSTINCFLAGS))

LintTarget()

MSGOBJS = msg_lib.o netread.o version.o
CVTOBJS = cvt_test.o convert.o
REOBJS = re_test.o zl_regex.o version.o

TestProgramTarget(cvt_test,$(CVTOBJS) $(MSGOBJS),/**/,/**/,$(LIBMATH))

TestProgramTarget(re_test,$(REOBJS),/**/,/**/,$(LIBREGEXP))

TestProgramTarget(msg_test, msg_test.o $(MSGOBJS),/**/,/**/,/**/)

TestProgramTarget(ztime_test, ztime_test.o TCvt.o $(MSGOBJS),/**/,/**/,/**/)

RunTestProgram(cvt_test,coordinate conversion,./cvt_test)
RunTestProgram(msg_test,error logging,./msg_test > /dev/null 2>&1)
RunTestProgram(re_test,regular expressions,./re_test)
RunTestProgram(ztime_test,ztime class,./ztime_test)

/*
 * BTree and related class testing
 */
BSOBJS = Buffer.o SerialBuffer.o SerialStream.o Serializable.o XDR.o Logger.o \
	Format.o BlockFile.o FreeList.o Journal.o BlockObject.o

CccTestProgramTarget (tblocks,T_Block.o $(BSOBJS),/**/,/**/,/**/)

CccTestProgramTarget (dbf,dbf.o $(BSOBJS),/**/,/**/,/**/)

TBTREEOBJS = T_BTree.o TestTrees.o $(BSOBJS) ZTime.o TCvt.o version.o
CccTestProgramTarget (tbtree,$(TBTREEOBJS),/**/,/**/,/**/)

RunTestProgram(tblocks,block files,./tblocks > tblocks.log 2>&1)
RunTestProgram(tbtree,b+trees,(if [ -f /usr/dict/words ]; then cat /usr/dict/words; elif [ -f /usr/share/lib/dict/words ]; then cat /usr/share/lib/dict/words; fi) | ./tbtree 1000 >tbtree.log 2>&1)

clean::
	$(RM_CMD) tbtree.log tblocks.log

DistfilesTarget($(DISTFILES))

ZebraMakeDepend()
CcDependTarget($(CSRCS))
CccDependTarget($(CCSRCS))
