!
! $Id: Daemon.state,v 2.25 2000-06-07 20:28:52 granger Exp $
!
! The data store daemon configuration language.
!
!
!		Copyright (C) 1987,88,89,90,91 by UCAR
!	University Corporation for Atmospheric Research
!		   All rights reserved
!
! No part of this work covered by the copyrights herein may be reproduced
! or used in any form or by any means -- graphic, electronic, or mechanical,
! including photocopying, recording, taping, or information storage and
! retrieval systems -- without permission of the copyright owner.
! 
! This software and any accompanying written materials are provided "as is"
! without warranty of any kind.  UCAR expressly disclaims all warranties of
! any kind, either express or implied, including but not limited to the
! implied warranties of merchantibility and fitness for a particular purpose.
! UCAR does not indemnify any infringement of copyright, patent, or trademark
! through use or modification of this software.  UCAR does not provide 
! maintenance or updates for its software.
!

define state initial
	eoftext 'exit'
	ctable ui$command_table
	@ #ui$defs_file 

	input 'platform' 1
		next platform-name
	endinput
	input 'class' 25
		next class-name
	endinput
	input 'subplatform' 12
		next subplatform-parent
	endinput
	input 'instance' 28
		next instance-class
	endinput
	input 'subplats' 29
		next subplats-instance-or-class
	endinput
	input 'start' 90
		next ust$no_more
	endinput
	input 'done' 8
		next ust$no_more
	endinput
	input 'truncate' 14
		next trunc-how-much
	endinput
	input 'every' 15
		next every-interval
	endinput
	input 'broadcast' 17
		next bcast-address
	endinput
	input 'receive' 18
		next ust$final_int
	endinput
	input 'cache' 20
		next cache-opt-dirty
	endinput
	input 'rescan' 21
		next rescan-which
	endinput
	input 'source' 54
		next source-name
	endinput
	input 'require' 126
		next ust$final_unmunged_string
	endinput
enddef



define state bcast-address
	input string
		next ust$final_int
	endinput
enddef


!----------------------------------------------------------------------
! Platform declaration with optional class name
!
define state platform-name
	input string
		next platform-class
	endinput
enddef

define state platform-class
	input EOS
		done
	endinput
	input string
		next ust$no_more
	endinput
enddef

!----------------------------------------------------------------------
! Class declaration with optional superclass name
!
define state class-name
	input string
		next class-superclass
	endinput
enddef

define state class-superclass
	input EOS
		done
	endinput
	input string
		next ust$no_more
	endinput
enddef

!-------------------------------------------------------------------------
! Adding subplatforms to a class or instance, using the form
! 	subplats <name> <class> <instance-name>+
! where name is the name of either a class or an instance
!
define state subplats-instance-or-class
	input string
		next subplats-class
	endinput
enddef

define state subplats-class
	input string
		next subplats-name
	endinput
enddef

define state subplats-name
	input string
		next subplats-name-cont
	endinput
enddef

define state subplats-name-cont
	input EOS
		done
	endinput
	input string
		next subplats-name-cont
	endinput
enddef


!-------------------------------------------------------------------------
! Stuff for platform and class definitions.  Not all may be valid for
! platform definitions, but it's left up to the command handler to notice.
! The only difference between here and below is the terminator allowed at
! the end.
!
define state in-class
	input 'endclass' 23
		next end-optional-name
	endinput
	input 'organization' 3
		next organization
	endinput
	input 'filetype' 4
		next file-type
	endinput
	input 'keep' 5
		next ust$final_string
	endinput
	input 'regular' 6
		next ust$final_int
	endinput
	input 'mobile' 7
		next ust$no_more
	endinput
	input 'composite' 9
		next ust$no_more
	endinput
	input 'discrete' 10
		next ust$no_more
	endinput
	input 'directory' 11
		next ust$final_unmunged_string
	endinput
	input 'maxsamples' 13
		next ust$final_int
	endinput
	input 'remote' 16
		next ust$final_unmunged_string
	endinput
	input 'subplats' 29
		next subplats-class
	endinput
	input 'comment' 27
		next ust$final_unmunged_string
	endinput
	input 'daysplit' 19
		next ust$no_more
	endinput
	input 'model' 22
		next ust$no_more
	endinput
	input 'instancedir' 40
		next instancedir-keyword
	endinput
	input 'inheritdir' 50
		next inheritdir-keyword
	endinput
	input 'abstract' 24
		next ust$no_more
	endinput
	input 'virtual' 33
		next ust$no_more
	endinput
enddef

! The allowed keywords for 'instancedir'.  The default allows sub and same
! to be reset in subclasses (implicit or explicit).
!
define state instancedir-keyword
	input 'copyclass' 41
		next ust$no_more
	endinput
	input 'subdirclass' 42
		next ust$no_more
	endinput
	input 'copyparent' 43
		next ust$no_more
	endinput
	input 'subdirparent' 44
		next ust$no_more
	endinput
	input 'default' 45
		next ust$no_more
	endinput
	input 'root' 46
		next ust$no_more
	endinput
enddef

define state inheritdir-keyword
	input 'append' 51
		next ust$no_more
	endinput
	input 'copy' 52
		next ust$no_more
	endinput
	input 'none' 53
		next ust$no_more
	endinput
enddef

define state end-optional-name
	input EOS
		done
	endinput
	input string
		next ust$no_more
	endinput
enddef
	
!-------------------------------------------------------------------------
! Stuff for platform and class definitions.  Not all may be valid for
! class definitions, but it's left up to the command handler to notice.
!
define state in-platform
	input 'endplatform' 2
		next end-optional-name
	endinput
	input 'organization' 3
		next organization
	endinput
	input 'filetype' 4
		next file-type
	endinput
	input 'keep' 5
		next ust$final_string
	endinput
	input 'regular' 6
		next ust$final_int
	endinput
	input 'mobile' 7
		next ust$no_more
	endinput
	input 'composite' 9
		next ust$no_more
	endinput
	input 'discrete' 10
		next ust$no_more
	endinput
	input 'directory' 11
		next ust$final_unmunged_string
	endinput
	input 'maxsamples' 13
		next ust$final_int
	endinput
	input 'remote' 16
		next ust$final_unmunged_string
	endinput
	input 'subplats' 29
		next subplats-class
	endinput
	input 'comment' 27
		next ust$final_unmunged_string
	endinput
	input 'daysplit' 19
		next ust$no_more
	endinput
	input 'model' 22
		next ust$no_more
	endinput
	input 'virtual' 33
		next ust$no_more
	endinput
	input 'instancedir' 40
		next instancedir-keyword
	endinput
	input 'inheritdir' 50
		next inheritdir-keyword
	endinput
enddef

! Either add more subplats or reset the list to nil
!
define state subplats-class
	input 'none' 31
		next ust$no_more
	endinput
	input string
		next subplats-name
	endinput
enddef

define state subplats-name
	input string
		next subplats-name-cont
	endinput
enddef

define state subplats-name-cont
	input EOS
		done
	endinput
	input string
		next subplats-name-cont
	endinput
enddef


!
! File types -- must match those in dsPrivate.h
!
define state file-type
	input 'netcdf' 0
		next ust$no_more
	endinput
	input 'boundary' 1
		next ust$no_more
	endinput
	input 'raster' 2
		next ust$no_more
	endinput
	input 'compressed_raster' 3
		next ust$no_more
	endinput
	input 'zeb' 4
		next ust$no_more
	endinput
	input 'zebra' 4
		next ust$no_more
	endinput
	input 'grib' 5
		next ust$no_more
	endinput
	input 'grib_sfc' 6
		next ust$no_more
	endinput
	input 'grads' 7
	      	next ust$no_more
	endinput
	input 'grads_model' 8
		next ust$no_more
	endinput
	input 'hdf' 9
	      	next ust$no_more
	endinput
	input 'sweepfile' 10
		next ust$no_more
	endinput	      
enddef





!
! Possible organizations -- must match those in DataStore.h
!
define state organization
	input 'image' 4
		next ust$no_more
	endinput
	input 'grid' 1
		next ust$no_more
	endinput
	input '1dgrid' 8
		next ust$no_more
	endinput
	input '2dgrid' 1
		next ust$no_more
	endinput
	input '3dgrid' 6
		next ust$no_more
	endinput
	input 'irgrid' 2
		next ust$no_more
	endinput
	input 'scalar' 3
		next ust$no_more
	endinput
	input 'outline' 5
		next ust$no_more
	endinput
	input 'transparent' 9
		next ust$no_more
	endinput
	input 'fixedscalar' 10
		next ust$no_more
	endinput
	input 'nspace' 11
		next ust$no_more
	endinput
	input 'polar' 12
		next ust$no_more
	endinput
enddef

!
! Definition of subplatforms.
!

define state subplatform-parent
	input string
		next subplatform-list
	endinput
enddef

define state subplatform-list
	input string
		next continue-subplatform
	endinput
enddef

define state continue-subplatform
	input string
		next continue-subplatform
	endinput
	input EOS
		done
	endinput
enddef

!---------------------------------------------------------------------
! Definition of instances.
!
define state instance-class
	input string
		next instance-name
	endinput
enddef

define state instance-name
	input string
		next instance-name-cont
	endinput
enddef

define state instance-name-cont
	input string
		next instance-name-cont
	endinput
	input EOS
		done
	endinput
enddef
!---------------------------------------------------------------------

define state trunc-how-much
	input integer
		next trunc-which
	endinput
	input 'default' 0
		next trunc-which
	endinput
enddef

define state trunc-which
	input EOS
		done
	endinput
	input 'all' 0
		next ust$no_more
	endinput
	input string
		lowercase
		next ust$no_more
	endinput
enddef


define state every-interval
	input integer
		next ust$final_unmunged_string
	endinput
enddef


!
! After a cache command allow an optional "dirty" qualifier or a file name.
!
define state cache-opt-dirty
	input EOS
		done
	endinput
	input 'dirty' 0
		next ust$no_more
	endinput
	input string
		next ust$no_more
	endinput
enddef


!
! Accept one option for rescan, either platform name or "all" qualifier
!
define state rescan-which
	input EOS
		done
	endinput
	input 'all' 0
		next ust$no_more
	endinput
	input string
		next ust$no_more
	endinput
enddef

!
! source <name>
!	Directory <directory>
!	[CacheFile <cachefile>]
!	[DirConst [true|false]]
!	[FileConst [true|false]]
!	[RememberAll [true|false]]
!	[DelayDataDirs [true|false]]
!	[PlatDir <platname> <directory>]
! endsource
!
define state source-name
	input string
		next ust$no_more
	endinput
enddef

define state in-source
	input 'endsource' 0
		next ust$no_more
	endinput
	input 'directory' 1
		next ust$final_unmunged_string
	endinput
	input 'cachefile' 2
		next ust$final_unmunged_string
	endinput
	input 'dirconst' 3
		next src-t-or-f
	endinput
	input 'fileconst' 4
		next src-t-or-f
	endinput
	input 'rememberall' 5
		next src-t-or-f
	endinput
	input 'platdir' 6
		next src-platdir-platname
	endinput
	input 'delaydatadirs' 7
		next src-t-or-f
	endinput
enddef

define state src-platdir-platname
	input string
		next ust$final_unmunged_string
	endinput
enddef

define state src-t-or-f
	input 'true' 1
		next ust$no_more
	endinput
	input 'false' 0
		next ust$no_more
	endinput
enddef

set ui$initial_state "initial"

procedure ui$init
	local _id '$Id: Daemon.state,v 2.25 2000-06-07 20:28:52 granger Exp $'

	start
	done
endprocedure


