/* -*- C -*-
 * Imakefile for the DataStore
 */

MFVERSION="$Id: Imakefile,v 1.45 1996-11-19 10:59:21 granger Exp $"

DEPLIBS=$(LIBZEB)
LIBMPROF=/dt/granger/libc_mp.a
/* SYSLIBS= $(LIBMPROF) */

DMNSYSLIBS=$(LIBREGEXP) $(LIBMATH) $(LIBTERMCAP)
DMNLIBS=$(LIBZEB) $(LIBRDSS) $(XLIBS) $(LIBNETCDF) $(LIBHDF)
SYSLIBS=$(LIBREGEXP) $(LIBMATH)
LIBS=$(LIBZEB) $(LIBNETCDF) $(LIBHDF)

DEBUGGER = xgdb
#ifdef DebugFlag
DEBUG = -DDEBUG -DNoBuffer -DDEBUGGER="\"$(DEBUGGER)\""
#endif
DEFINES = $(DEBUG) /* -DNCSYNC_FIXED */

/* 
 * DSOBJS, DSSRCS = Daemon-specific object modules 
 */
DSOBJS = Daemon.o d_DataTables.o d_Config.o d_Scan.o d_Debug.o d_Appl.o
DSSRCS = Daemon.c d_DataTables.c d_Config.c d_Scan.c d_Debug.c d_Appl.c

DFAOBJS = DataFormat.o DFA_NetCDF.o DFA_Zebra.o DFA_HDF.o DFA_Grads.o \
          DFA_Boundary.o DFA_GRIB.o GRIB.o DFA_Raster.o
DFASRCS = DataFormat.c DFA_NetCDF.c DFA_Zebra.c DFA_HDF.c DFA_Grads.c \
          DFA_Boundary.c DFA_GRIB.c GRIB.c DFA_Raster.c

/* 
 * DSLIBOBJS, DSLIBSRCS = normal DS library code 
 */
DSLIBOBJS = Appl.o DFA_Appl.o SA_Appl.o C_Appl.o ingest.o GetList.o \
	Fields.o d_Notify.o Platforms.o $(DFAOBJS) 
DSLIBSRCS = Appl.c DFA_Appl.c SA_Appl.c C_Appl.c ingest.c GetList.c \
	Fields.c d_Notify.c Platforms.c $(DFASRCS)

/*
 * Modules shared between client library and daemon
 */
SHAREDOBJS = d_Notify.o Fields.o Platforms.o $(DFAOBJS)

/* 
 * DCOBJS, DCSRCS =  data chunk modules 
 */
DCOBJS = DataChunk.o DataAttr.o dc_Boundary.o dc_IRGrid.o dc_Image.o \
	dc_MetData.o dc_MetAttr.o dc_RGrid.o dc_Scalar.o dc_Transp.o \
	dc_TrAttr.o dc_Attr.o dc_Location.o dc_NSpace.o dc_Process.o \
	dc_Elements.o dc_ADE.o dc_All.o Details.o
DCSRCS = DataChunk.c DataAttr.c dc_Boundary.c dc_IRGrid.c dc_Image.c \
	dc_MetData.c dc_MetAttr.c dc_RGrid.c dc_Scalar.c dc_Transp.c \
	dc_TrAttr.c dc_Attr.c dc_Location.c dc_NSpace.c dc_Process.c \
	dc_Elements.c dc_ADE.c dc_All.c Details.c

UTILSRCS = rfdump.c zfdump.c GRIBdump.c bfdump.c

/*
 * For debugging and testing
 */
TESTSRCS = aline.c apple.c T_HDF.c \
           T_NSpace.c T_Scalar.c T_Grids.c T_Attr.c T_Transparent.c \
           T_MetData.c T_ZNF.c T_Utils.c T_DataStore.c \
           T_NetCDF.c T_Appl.c T_DataFormat.c T_DataChunk.c T_Fields.c

/*
 * Tests which do not include C source files, and so can be
 * included on makedepend command line.
 */
TESTDEPS = aline.c apple.c T_NSpace.c T_Scalar.c T_Grids.c T_Attr.c \
           T_Utils.c T_DataStore.c T_Fields.c

TESTOBJS = T_NSpace.o T_Scalar.o T_Grids.o T_Attr.o T_Transparent.o \
           T_MetData.o T_ZNF.o T_Utils.o T_DataStore.o T_Fields.o \
           T_NetCDF.o T_Appl.o T_DataFormat.o T_DataChunk.o

/*
 * The complete set of modules for linking test programs.  Some test
 * objects supercede the normal library objects, so order is important.
 */
TESTMODS = $(TESTOBJS) ./libZebDS.a

/*
 * All of the sources in this directory, for the make depend.
 */
SRCS = $(DSLIBSRCS) $(DCSRCS) $(DSSRCS) $(UTILSRCS)

PRIVATE_HEADERS = BoundaryFile.h DataChunkP.h dslib.h znfile.h \
		  RasterFile.h commands.h dfa.h dsDaemon.h dsPrivate.h \
		  GRIB.h Appl.h DataFormat.h NoFormat.h Platforms.h apple.h

HEADERS = DataStore.h DataChunk.h ingest.h fields.h ds_fields.h

DSCONFIGS = perm.config aline.config apple.config

DISTFILES = Imakefile $(SRCS) $(PRIVATE_HEADERS) $(TESTSRCS) \
            $(HEADERS) Daemon.state hdflook.c $(DSCONFIGS) dbgstart

DEPEND_DEFINES=$(HDFDEFINES) $(HDFINCLUDES) $(NETCDFINCLUDES) $(RDSSINCLUDES)

DMNOBJS = $(DSOBJS) $(SHAREDOBJS) $(DCOBJS)
CompleteProgramTarget(dsDaemon,$(DMNOBJS),$(DEPLIBS),$(DMNLIBS),$(DMNSYSLIBS))

SpecialObjectRule($(DSOBJS),/**/,$(RDSSINCLUDES))

UILoadFileTarget(dsDaemon.lf,Daemon.state)

/*
 * Make the library.
 */
NormalLibraryTarget (ZebDS, $(DSLIBOBJS) $(DCOBJS))
SpecialObjectRule(ingest.o,ingest.c ingest.h,$(RDSSINCLUDES))
SpecialObjectRule(DFA_NetCDF.o T_NetCDF.o,DFA_NetCDF.c,$(NETCDFINCLUDES))
SpecialObjectRule(DFA_HDF.o T_HDF.o,DFA_HDF.c,$(HDFDEFINES) $(HDFINCLUDES))

InstallLibrary (ZebDS, $(LIBDIR))

BuildIncludesTop($(HEADERS))
InstallMultipleFlags($(HEADERS),$(INCDIR),$(INSTINCFLAGS))

/*
 * Dump routines.
 */
CompleteProgramTarget (rfdump, rfdump.o, $(LIBZEB), $(LIBZEB), $(LIBMATH))

TestProgramTarget (bfdump, bfdump.o, $(LIBZEB), $(LIBZEB), $(LIBMATH))

ZFOBJS = zfdump.o Fields.o $(DCOBJS)
CompleteProgramTarget (zfdump, $(ZFOBJS), $(DEPLIBS), $(LIBZEB), $(SYSLIBS))

GDOBJS = GRIBdump.o GRIB.o
CompleteProgramTarget (GRIBdump, $(GDOBJS), $(LIBZEB), $(LIBZEB), $(LIBMATH))

/*
 * Test routines.
 */
#if HasHDF
TestProgramTarget (hdflook, hdflook.o, /**/, $(LIBHDF), /**/)
#endif

APOBJS = apple.o $(TESTMODS)
TestProgramTarget (apple, $(APOBJS), $(DEPLIBS), $(LIBS), $(SYSLIBS))

TestProgramTarget (nctime, nctime.o, /*DEPLIBS*/, $(LIBNETCDF), /**/)
SpecialObjectRule(nctime.o,/**/,$(NETCDFINCLUDES))

NC31DIR = /net/src/data-tools/netcdf-3.1a/gcc-g/include
NC31LIB = /net/src/data-tools/netcdf-3.1a/gcc-g/lib/libnetcdf.a
NC24DIR = /net/src/data-tools/netcdf-2.4-beta2/gcc-O/include
NC24LIB = /net/src/data-tools/netcdf-2.4-beta2/gcc-O/lib/libnetcdf.a

apple31: $(APOBJS) $(DEPLIBS) FORCE
	rm -f apple DFA_NetCDF.o
	$(MAKE) apple LIBNETCDF=$(NC31LIB) NETCDFINCLUDES=-I$(NC31DIR)
	mv apple apple31

apple31.tc: $(APOBJS) $(DEPLIBS) FORCE
	rm -f apple DFA_NetCDF.o
	$(MAKE) apple.tc LIBNETCDF=$(NC31LIB) NETCDFINCLUDES=-I$(NC31DIR)
	mv apple.tc apple31.tc

nctime31: nctime.o FORCE
	rm -f nctime.o
	$(MAKE) nctime LIBNETCDF=$(NC31LIB) NETCDFINCLUDES=-I$(NC31DIR)
	mv nctime nctime31

apple24: $(APOBJS) $(DEPLIBS) FORCE
	rm -f apple DFA_NetCDF.o
	$(MAKE) apple LIBNETCDF=$(NC24LIB) NETCDFINCLUDES=-I$(NC24DIR)
	mv apple apple24

nctime24: nctime.o FORCE
	rm -f nctime.o
	$(MAKE) nctime LIBNETCDF=$(NC24LIB) NETCDFINCLUDES=-I$(NC24DIR)
	mv nctime nctime24

FORCE:

#ifdef notdef /* kludges to compile gprof information */
NC31DIR = /net/src/data-tools/netcdf-3.1a/sunos-5.4
NC24DIR = /net/src/data-tools/netcdf-2.4-beta2/sunos-5.4

apple31: $(APOBJS) $(DEPLIBS)
	rm -f apple DFA_NetCDF.o
	$(MAKE) apple LIBNETCDF=$(NC31DIR)/libnetcdf.a \
		      EXTRA_LIBRARIES='-lsocket -lnsl -ldl' \
		      NETCDFINCLUDES=-I$(NC31DIR)
	mv apple apple31

nctime31: nctime.o
	rm -f nctime.o
	$(MAKE) nctime LIBNETCDF=$(NC31DIR)/libnetcdf.a \
		      EXTRA_LIBRARIES='-lsocket -lnsl -ldl' \
		      NETCDFINCLUDES=-I$(NC31DIR)
	mv nctime nctime31

apple24: $(APOBJS) $(DEPLIBS)
	rm -f apple DFA_NetCDF.o
	$(MAKE) apple LIBNETCDF=$(NC24DIR)/lib/libnetcdf.a \
	              NETCDFINCLUDES=-I$(NC24DIR)/include \
	              EXTRA_LIBRARIES='-lsocket -lnsl -ldl'
	mv apple apple24

nctime24: nctime.o
	rm -f nctime.o
	$(MAKE) nctime LIBNETCDF=$(NC24DIR)/lib/libnetcdf.a \
	               NETCDFINCLUDES=-I$(NC24DIR)/include \
	               EXTRA_LIBRARIES='-lsocket -lnsl -ldl'
	mv nctime nctime24
#endif

ALOBJS = aline.o ./libZebDS.a
TestProgramTarget (aline, $(ALOBJS), $(DEPLIBS), $(LIBS), $(SYSLIBS))

THDFOBJS = T_HDF.o ./libZebDS.a
TestProgramTarget (testhdf, $(THDFOBJS), $(DEPLIBS), $(LIBS), $(SYSLIBS))

/*
 * We have to use an explicit test rule since we have to start up
 * a zebra session, and we're dependent on multiple programs.
 */
#if UseInstalledZebra
MESSAGE = $(BINDIR)/message
TIMER = $(BINDIR)/timer
ZSTOP = $(BINDIR)/zstop
DSDUMP = $(BINDIR)/dsdump
#else
MESSAGE = $(TOP)/src/msg/message
TIMER = $(TOP)/src/timer/timer
ZSTOP = $(TOP)/src/zstop/zstop
DSDUMP = $(TOP)/src/dsdump/dsdump
#endif
ZEBPROGS = $(MESSAGE) $(TIMER) $(ZSTOP) $(DSDUMP)
TESTPROJ = /net/shared/zebra/project/test
DATA_DIR = $(TESTPROJ)/data
SOCKET = ./test.socket
INVENTORY = 10
#ifdef DebugFlag
DEBUG_FLAG = -debug
TESTOUT =
#else
DEBUG_FLAG =
TESTOUT = > /dev/null 2>&1
#endif
ALINE = aline -nconsumers 4 $(DEBUG_FLAG) -period 4 -inventory $(INVENTORY)
DSDAEMON = ./dsDaemon $(DEBUG_FLAG)
APPLE = apple $(DEBUG_FLAG)

test:: test.session test.aline.only test.apple.only test.close

test.aline: test.aline.only test.close

test.apple: test.apple.only test.close

#define TEST_ENV \
	-@ZEB_SOCKET=$(SOCKET); export ZEB_SOCKET; \ @@\
	DSDUMP=$(DSDUMP); export DSDUMP; \ @@\
	DATA_DIR=$(DATA_DIR); export DATA_DIR; \ 


test.session $(SOCKET): $(ZEBPROGS) dsDaemon dsDaemon.lf nstest.config
	TEST_ENV
	echo "Starting a zebra test session... ZEB_SOCKET=$$ZEB_SOCKET"; \
	$(ZSTOP) $(TESTOUT); $(RM) $$ZEB_SOCKET; \
	set -x; \
	$(MESSAGE) $(TESTOUT) ; \
	($(TIMER) $(TESTOUT) &); \
	($(DSDAEMON) nstest.config $(TESTOUT) &); \
	sleep 5; /* give daemon time to connect */

#ifndef LinuxArchitecture
test.aline.only: aline $(SOCKET)
	TEST_ENV
	echo "Assembly line testing with 'aline'..."; \
	set +x; \
	echo " -- Shared netCDF platform" ; \
	if $(ALINE) -share $(TESTOUT); \
		then echo "Passed."; \
	else \
		echo "FAILED."; \
	fi; \
	echo " -- Linked netCDF platforms (files removed)" ; \
	if $(ALINE) -remove $(TESTOUT); \
		then echo "Passed."; \
	else \
		echo "FAILED."; \
	fi; \
	echo " -- Shared ZNF platform" ; \
	if $(ALINE) -znf -share $(TESTOUT); \
		then echo "Passed."; \
	else \
		echo "FAILED."; \
	fi; \
	echo " -- Linked ZNF platforms (files removed)" ; \
	if $(ALINE) -znf -remove $(TESTOUT); \
		then echo "Passed."; \
	else \
		echo "FAILED."; \
	fi
#else
test.aline.only: aline $(SOCKET)
	TEST_ENV
	echo "Assembly line testing with 'aline'..."; \
	set +x; \
	echo " -- Shared netCDF platform" ; \
	if $(ALINE) -share $(TESTOUT); \
		then echo "Passed."; \
	else \
		echo "FAILED."; \
	fi; \
	echo " -- Linux NFS bug -- skipping linked netCDF test" ; \
	echo " -- Shared ZNF platform" ; \
	if $(ALINE) -znf -share $(TESTOUT); \
		then echo "Passed."; \
	else \
		echo "FAILED."; \
	fi; \
	echo " -- Linux NFS bug -- skipping linked znf test"
#endif

test.apple.only: apple $(SOCKET) $(DSDUMP)
	TEST_ENV
	echo "Running 'apple', arrows away..."; \
	if $(APPLE) $(TESTOUT); \
		then echo "Passed."; \
	else \
		echo "FAILED."; \
	fi

test.close: $(ZSTOP)
	TEST_ENV
	echo "Ending zebra test session..."; \
	$(ZSTOP) $(TESTOUT); $(RM) $$ZEB_SOCKET

clean::
	$(RM) $(SOCKET)

/*
 * Saber stuff.  This is a bit complicated, depending on what you are
 * trying to debug.  The saber "#" construct makes it through the Sun
 * preprocessor; others may give trouble.
 *
 * Note that imake produces some saber rules for the normal program
 * targets.  Either those or these below can be used.  Or add your own!
 */
saber_lib:
	#setopt ansi
	#load $(CFLAGS) -I/usr/local/include $(DSLIBSRCS) $(DCOBJS)
	#load -Bstatic $(LIBS) $(LIBGCC)

DependTarget()

testdepend:
	$(MAKE) depend SRCS='$(SRCS) $(TESTDEPS)'

mft: Makefile testdepend

/*
 * These object files include C source files, so we must hardcode their
 * dependencies on the corresponding objects, which in turn have their
 * header dependencies calculated by makedepend.
 */
T_Appl.o: Appl.o apple.h
T_DataFormat.o: DataFormat.o apple.h
T_DataChunk.o: DataChunk.o apple.h
T_MetData.o: dc_MetData.o apple.h
T_NetCDF.o: DFA_NetCDF.o apple.h
T_Transparent.o: dc_Transp.o apple.h
T_ZNF.o: DFA_Zebra.o apple.h

LintTarget()

DistfilesTarget($(DISTFILES))

