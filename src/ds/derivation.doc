		Field Names and Derivations in Zebra
		====================================

Field Names
===========

Field names in Zebra now have a  richer syntax.  The old single name still 
works, e.g., "tdry".  There are now three extra qualifiers that can be 
attached to a name, though.  A fully qualified field name looks like:

	name[type][units][description]

where 'type' is a generic field type (explained later), "units" are the field's
units in a form acceptable to udunits, and "description" is the description 
or long name for the field.

Any of the pieces may be left empty, and trailing empty pieces may be dropped.
The following are all legal field names:

	tdry
	tdry[][][]
	tdry[T][degC]
	tdry[T][degC][temperature]
	tdry[][][temperature]
	[T][degC]

Note that two fields are equivalent if and only if all of their pieces 
are equivalent.  In the list above, only the first two specifications are
equivalent.

Generic Field Type
==================

Zebra now uses the concept of a generic field type.  The generic field type is
an identifier intended to be common for fields that have the same type of
data.  For instance, an aircraft may report two temperature fields, t_nose 
and t_tail, but both of them represent an ambient temperature, which for Zebra
uses the generic field type "T".  Complete field names for these two fields
might look like this:

	t_nose[T][degC][nose temperature]
	t_tail[T][degC][tail temperature]

Here are the generic field types used in the predefined derivations in /zebra/lib/Derivations:

	T	- temperature
	P	- pressure
	rh	- relative humidity
	uwind	- u (eastward) component of wind
	vwind	- v (northward) component of wind
	wspd	- wind speed
	wdir	- direction from which wind is blowing, clockwise from north
	T_d	- dewpoint temperature
	T_wet	- wet bulb temperature
	T_v	- virtual temperature
	T_L	- temperature of the lifting condensation level
	theta	- potential temperature
	theta_e	- equivalent potential temperature
	e	- vapor pressure
	e_sw	- saturation vapor pressure
	w	- mixing ratio
	L_c	- latent heat of condensation

The generic field types serve at least a couple of useful purposes.  First, 
they allow field derivation definitions to be written in a more generic
fashion, independent of field names.  Similarly, they allow fields to be
specified as generics in plot descriptions without having to know the exact 
name of a field for a given platform.


Field Derivation Definitions
============================

Field derivation formulas can be written by users, and will be automatically
applied where possible when data are requested.  Common meteorological
derivations exist in the file /zebra/lib/Derivations, and further derivations
will be read from files <project>/derivs/defaults and
<project>/derivs/<platform> if these files exist.  Derivations in the latter
file(s), which are named by platform, apply *only* to the platform named.

Derivation files consist of derivation formulas interspersed with C-style
comments.  A derivation formula is written in the form:

	<field> = <formula>;

where <field> is the field to be derived, and <formula> is an algebraic 
expression of fields, functions, and operators defining the derivation.
The standard algebraic operators are available: +, -, /, *.  In addition,
some functions are provided:

	ln(x)		- natural log of x
	exp(x,y)	- e^x
	sqrt(x)		- sqaure root of x
	sin(x)		- sine of x (x in radians)
	cos(x)		- cosine of x (x in radians)
	atan2(x,y)	- arctangent of y/x, in the range -pi to pi
	pow(x,y)	- x^y
	t_wet(t,p,rh)	- wet bulb temperature in K, given temperature in K,				  pressure in hPa, and relative humidity in percent
	e_sw(t)		- saturation vapor pressure in hPa, given temperature
			  in K

The latter two functions are just fast shortcuts for a couple of derivations
that can be very slow.


Definition of "can yield"
=========================

Field A can yield field B if:

	o the name of A is the same as the name of B -or- B has no name
		AND
	o the generic type of A is the same as the generic type of B -or-
	  B has no generic type
		AND
	o the description of A is the same as the description of B -or- 
	  B has no description
		AND
	o the units of A are the same as the units of B -or- the units of 
	  A can be converted to the units of B by the udunits package -or-
	  B has no units

Hence, any of the following can yield "[T][degC]":

	tdry[T][degC]
	[T][K]
	temp[T][degF][Fahrenheit temperature]

while the following cannot:

	T[][degC]
	tdry[T][][temperature with unknown units]


Data Requests
=============

Given the above definition, the following is the procedure for handling a
data request for field F from platform P:

o If F is a pending field in a higher level of the recursion, then 
  return that it is unavailable.  See below for recursive requests.

o Otherwise, if one of the raw fields from P can yield F, return that.

o Otherwise, for each derived field D in the project's platform-specific
  derivations for P (if any):
	o If D cannot yield F, continue to the next D
	o Add D to the list of pending fields.
	o Make data requests for each field required to derive D (i.e., 
	  all fields that show up on the right side of D's derivation 
	  definition).  
	o Remove D from the list of pending fields.
	o If all required fields were available then perform the derivation
	  and return D, otherwise continue to the next D.

o If nothing was returned, repeat the above with the project's default 
  derivations (if any).

o If nothing was returned, repeat the above with the global default 
  derivations.

o Otherwise, return that the field is unavailable.


Or in pseudo-code:


    field_list Pending;

    GetData (platform P, field F)
    {
    /*
     * If this field is already pending, we fail here
     */
	if (F is in Pending)
	    return 0;
    /*
     * Look for this field among the raw fields from the platform
     */
	field_list RList = raw fields of P;
	foreach (field Rf in RList)
	{
	    if (Rf can yield F)
		return data for Rf;
	}
    /*
     * Loop through our derivation lists
     */
	foreach (derivation_list Dlist in [platform_derivation_list 
	                                   project_derivation_list
                                           global_derivation_list])
        {
        /*
         * Loop through the derivations in this list
	 */
	    foreach (derivation D in Dlist)
	    {
		field Df = result field of D;

		if (Df cannot yield F)
		    continue;

		add Df to Pending;

		field_list Required = required fields for D;
		boolean Fail = FALSE;
	    
		foreach (field Rf in Required)
		{
		    if (! GetData (P, Rf))
		    {
			Fail = TRUE;
			break;
		    }
		}

		remove Df from Pending;
	    
		if (Fail)
		    continue;
		else
		    perform derivation D and return results;
	    }
	}
	
	return 0;
    }


Platform Class Derivations
==========================

For lack of a better place, here are some notes about platform class fields
and derivations.  In addition to the per-platform derivation files
originally supported by the zebra derivation module, later versions of
zebra support derivations supplied with a platform class definition, such
as in the datastore daemon config file (ds.config).  The keyword
'derivation' in a class definition appends the quoted text string argument
to any current derivation text for the platform class.  Platform subclasses
inherit all of their superclass' derivations, and currently there is no way
to disable that.

This example defines an alias from a fully qualified mixing ratio field to
the less qualified field which has a default derivation.  This allows
requests for a field named 'mr' to return the derived mixing ratio values.
One intention of this technique is mentioned below with class fields.

class Surface
	comment		'Surface Meteorology from Campbell Data Logger'
      	organization	scalar
	filetype	netcdf
	daysplit
	maxsamples	1440
	derivation	"mr[w][%][Mixing Ratio] = [w][%];"
endclass

ISS profilers store their vertical gate heights relative to ground level,
so this class derivation provides gate altitudes in heights above MSL
computed using the profilers 'alt' location.  I think this would work, but
it hasn't yet been tried.  If it doesn't, we should make it work. :)

derivation "altitude[AltMSL][meters][Height above MSL] = [Height][meters] + alt[][meters];"

Multiple derivation lines are allowed: all of them will be concatenated
together into a single set of derivations for the platform class.  The
exact same syntax rules apply as for derivation files.  In particular, each
derivation should be followed by a semicolon.  Multiple derivations can be
included in one 'derivation' line, as long as they are separated by
semicolons.

The full set of derivations is associated with the platform class and
passed on to each datastore client which requests the definition of that
platform class.  The client parses the derivations right after loading the
per-platform derivation file, giving the per-platform derivations
precedence over the platform class derivations.  This means it's possible
to keep all derivations in the datastore config file rather than in a tree
of files under the 'derivs' directory, depending upon which approach seems
preferable.  Where many platform instances will share the same set of
derivations which are not appropriate in the defaults derivation file,
putting the derivations in a platform class can avoid duplicating
derivations in individual platform files.  This was part of the original
motivation for platform class derivations.  The ISS has well-defined,
hierarchical platform classes, but the set of possible platform instances
in a particular datastore session is dynamic.  Maintaining derivations in
the platform classes is simpler than maintaining a hierarchy of directories
filled with identical platform derivation files.

Platform Class Fields
=====================

In the case of ISS surface data, a common set of derived fields needs to be
available and easily accessible for display.  In the past that would
require writing explicit field menus for all the cases in which surface
data might be displayed.  It seems more natural to allow a platorm
definition to augment its set of fields and then include these 'platform
class fields' in the lists of fields returned by platform queries.  To all
datastore clients, including the graphics process, the class fields would
appear to be normal fields available directly from the data files, even if
the fields would actually be derived.  Secondly, when the platform's fields
are poorly specified, such as without units or type or description, it
would be convenient to more fully qualify the platform's fields with
derivation aliases rather than modifying the original data files.  Class
fields fill both of these needs.

Use a 'field' line in a platform class defintion to identify the field:

	field 	"[w][%]"

The above line adds the derived mixing ratio field, so mixing ratio will
automatically appear as a choice in all field menus generated for the
platform.  However, most users will not know that field type 'w'
corresponds to mixing ration, so a derivation alias included in the field
line can make the field choice more descriptive.

	field	"mr[w][%][Mixing Ratio] = [w][%];"

The datastore daemon detects the equals (=) sign in the field specifier and
first adds the whole line as if it had been passed in a 'derivation'
statement.  Then the field in the lefthand side is added as a normal class
field.  The effect is that a descriptive field called 'mr' with title
'Mixing Ratio' will appear in field menus, and it will alias the built-in
derivation for mixing ratio.

When a platform class field has the same name as an explicit data file
field, the platform class field will be returned in field list queries in
place of the data file field.  This allows the platform class definition to
override incorrect or incomplete field specifications in the data files.
This override can only happen for platform class fields.  Note the class
field must also alias the data file field for any data to be returned for
it:

	! Elaborate the undocumented netcdf fields
	!
	field		"tdry[T][degC][Temperature] = tdry;"
	field		"pres[P][hPa][Pressure] = pres;"
	field		"rh[rh][%][Relative humidity] = rh;"
	field		"wspd[wspd][meters second-1][Wind Speed] = wspd;"
	field		"wdir[wdir][degrees_north][Wind Direction] = wdir;"

The above example relates to the ISS surface platform, which for several
years now has been ingesting data with only field names.  The aliases are
only valid for the surface platform, thus they would not be appropriate for
the global derivation defaults.

Normally class fields would also be used for the common derivations
expected for a plaform.  From the derivation examples above, probably the
derived field should also be a class field:

	! Commonly derived surface fields
	!
	field	"mr[w][g/kg][Mixing ratio] = [w][g/kg];"
	field	"dewpoint[T_d][degC][Dewpoint Temperature] = [T_d][degC];"

Disclaimer
----------

I (gary) added the platform class derivations and fields to serve my own
needs for a unified ISS project configuration, and because I thought they'd
be cool.  If anyone finds the additions an abomination relative to Chris'
original field derivation design, at least you know to blame me and not
him. :)
