XCOMM $XConsortium: sgiLib.rules,v 1.6 92/05/29 17:05:46 rws Exp $
#define ForceNormalLib	YES
#define SharedOldLibX	NO
#define SharedLibXau	NO
#define SharedLibXdmcp	NO
#define SharedLibXTest	NO
#define SharedLibXTrap	NO
#define SharedLibPhigs	NO

/*
 * XXX Do not turn on sgiDSOlib and sgiShlib on *simultaneously*!
 */

#if OSMajorVersion <= 4

# ifndef sgiDSOlib
# define sgiDSOlib		NO
# endif
# ifndef sgiShlib
# define sgiShlib		YES	/* build R5 sgi SYSV shared libs */
# endif

#else /* OSMajorVersion > 4 ... */

# ifndef sgiDSOlib
# define sgiDSOlib		YES
# endif
# ifndef sgiShlib
# define sgiShlib		NO	/* build R5 sgi SYSV shared libs */
# endif

#endif /* OSMajorVersion */

#if sgiShlib || sgiDSOlib
#define HasSharedLibraries	YES
#endif

#if HasSharedLibraries
# define SharedLibX		YES
# define SharedLibXt		YES
# ifndef SharedDataSeparation
#  define SharedDataSeparation	YES
# endif
# ifndef ShLibIncludeFile
#  define ShLibIncludeFile <sgiLib.tmpl>
# endif
# ifndef PositionIndependentCFlags
#  define PositionIndependentCFlags -G 0
# endif

# if sgiShlib
#  define SharedLibXmu		NO
#  define SharedLibXaw		NO
#  define SharedLibXext		NO
#  define SharedLibXinput	NO
#  define SharedCodeDef		-DSHAREDCODE
#  define SharedLibraryDef	-DATTSHAREDLIB -DsgiShlib
#  ifndef Concat4
#   define Concat4(a,b,c,d) Concat(Concat3(a,b,c),d)
#  endif /* Concat4 */
# endif

# if sgiDSOlib
#  define SharedLibXmu		YES
#  define SharedLibXaw		YES
#  define SharedLibXext		YES
#  define SharedLibXinput	YES
#  define SharedCodeDef		/**/
#  define SharedLibraryDef	/**/
#  define SeparateSharedCompile	NO
# endif /* sgiShlib */

#else !HasSharedLibraries

# define SharedLibX		NO
# define SharedLibXt		NO
# define SharedLibXmu		NO
# define SharedLibXaw		NO
# define SharedLibXext		NO
# define SharedLibXinput	NO
# define SharedDataSeparation	NO

#endif /* HasSharedLibraries */

#if sgiDSOlib

/*
 * SharedLibraryTarget - generate rules to create a shared library.
 */
#define SharedLibraryTarget(libname,rev,solist,down,up)			@@\
AllTarget(Concat4(lib,libname,.so,rev))					@@\
									@@\
Concat4(lib,libname,.so,rev): Concat3(lib,libname,.a) $(REQUIREDLIBS)	@@\
	$(RM) $@ \							@@\
	&& $(LD) $(LDDSOOPTS) Concat3(lib,libname,.a) -o $@ $(REQUIREDLIBS)		@@\
									@@\
clean::									@@\
	$(RM) Concat3(lib,libname,.so)

#define SharedLibraryDataTarget(libname,rev,salist)

/*
 * InstallSharedLibrary - generate rules to install the shared library.
 */
#define	InstallSharedLibrary(libname,rev,dest)				@@\
install:: Concat4(lib,libname,.so,rev)					@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) -c $(INSTLIBFLAGS) Concat4(lib,libname,.so,rev) $(DESTDIR)dest

/*
 * InstallSharedLibraryData - generate rules to install the shared library data
 */
#define	InstallSharedLibraryData(libname,rev,dest)  /**/

#endif /* sgiDSOlib */

#if sgiShlib
/*
 * SharedLibraryTarget - generate rules to create a shared library;
 * build it into a different name so that the we don't hose people by having
 * the library gone for long periods.
 */

#define SharedLibraryTarget(libname,rev,solist,down,up)			@@\
AllTarget(Concat4(lib,libname,_s_,rev))					@@\
									@@\
Concat3(lib,libname,_s.a.tmp) Concat4(lib,libname,_s_,rev): solist $(CHECK_IMPORTS) $(CHECK_EXPORTS) $(CHECK_GLOBALS) $(CHECK_CONSTANTS) Concat(lib,libname.spec) @@\
	$(RM) $@ Concat3(lib,libname,_s.a.tmp) Concat3(lib,libname,_s.a)\ @@\
	&& cd down \							@@\
	&& $(TOOLROOT)/usr/bin/mkshlib -s Concat(up/lib,libname.spec) -t \ @@\
		up/$@ -h Concat3(up/lib,libname,_s.a.tmp) \		@@\
		| sed 's/^/	/'					@@\
									@@\
clean:: cleanShlib							@@\
									@@\
cleanShlib::								@@\
	$(RM) Concat4(lib,libname,_s_,rev) Concat3(lib,libname,_s.a) Concat3(up/lib,libname,_s.a.tmp)

#define SharedLibraryDataTarget(libname,rev,salist)			@@\
AllTarget(Concat3(lib,libname,_s.a))					@@\
									@@\
Concat3(lib,libname,_s.a): Concat3(lib,libname,_s.a.tmp) Concat4(lib,libname,_s_,rev) salist		@@\
	$(RM) $@; \							@@\
	$(MV) Concat3(lib,libname,_s.a.tmp) $@; \			@@\
	$(AR) $@ salist | sed 's/^/	/'

/*
 * Note that the following is defined only if sgiShlib = YES.
 */
#ifdef UseInstalled
#define InstSharedLibFlags $(INSTBINFLAGS)
#else
#define InstSharedLibFlags -m 0755 -i "$(STDIDBTAG) nostrip"
#endif

/*
 * InstallSharedLibrary - generate rules to install the shared library.
 * NOTE: file must be executable, but we don't want to strip it!
 */
#define	InstallSharedLibrary(libname,rev,dest)				@@\
install:: Concat4(lib,libname,_s_,rev)					@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) -c InstSharedLibFlags Concat4(lib,libname,_s_,rev) $(DESTDIR)dest

#define	InstallSharedLibraryData(libname,rev,dest)			@@\
install:: Concat3(lib,libname,_s.a)					@@\
	MakeDir($(DESTDIR)dest)						@@\
	$(INSTALL) -c $(INSTLIBFLAGS) Concat3(lib,libname,_s.a) $(DESTDIR)dest

#define sgiSharedLibrary(libname,rev,unique,down)			@@\
S_UNIQUE=unique								@@\
SHLIB_VERSION=rev							@@\
TARGET_NAME=Concat3(lib,libname,_s_$(SHLIB_VERSION))			@@\
TARGET_PATH_NAME=Concat(/usr/lib/,$(TARGET_NAME))			@@\
									@@\
SHLIBUTILS=$(TOP)/util/shlib						@@\
SHLIB_TRANSLATE=$(SHLIBUTILS)/shlib_translate				@@\
									@@\
$(SHLIB_TRANSLATE):							@@\
	cd $(SHLIBUTILS); make shlib_translate				@@\
									@@\
.s.o:									@@\
	$(RM) $@ down/$@						@@\
	$(CC) -c $(SHLIBDEF) $(SHAREDCODEDEF) $(PICFLAGS) $*.s \	@@\
	&& $(MV) $@ down/$@						@@\
	$(CC) -c $*.s

#define sgiSharedLibraryImports(libname, down)				@@\
$(sgi_SHARED_OBJS): import.def.h					@@\
									@@\
import.def.h: sgiImports						@@\
	rm -f import.def.h						@@\
	( \								@@\
	echo "/* This file is generated automatically.  Do not edit it */" ; \ @@\
	sed -e '/#/d' -e 's/^[ 	]*//' -e '/^$$/d' -e '/^:/d' -e 's/:.*//' -e 's/.*/#define & (*$(S_UNIQUE)&)/' < sgiImports ; \ @@\
	) > import.def.h						@@\
									@@\
import.s : sgiImports							@@\
	(echo "#ifdef sgiShlib" ; \					@@\
	echo "	.data" ; \						@@\
	sed -n < sgiImports \						@@\
		-e '/#/d' \						@@\
		-e '/^[ 	]*$$/d' \				@@\
		-e 's/^[ 	]*//' \					@@\
		-e h \							@@\
		-e 's/:.*//' \						@@\
		-e 's/..*/	.globl $(S_UNIQUE)&/p' \		@@\
		-e g \							@@\
		-e 's/:.*//' \						@@\
		-e 's/..*/$(S_UNIQUE)&:/p' \				@@\
		-e g \							@@\
		-e 's/.*://' \						@@\
		-e 's/.*/	.word &/p' \				@@\
	; echo "#endif"	\						@@\
	) > import.s							@@\
									@@\
CHECK_IMPORTS=check_imports						@@\
									@@\
$(CHECK_IMPORTS): latest_imports sgiImports				@@\
	@echo "\t"diff sgiImports latest_imports			@@\
	@if sed -e '/#/d' -e '/^[ 	]*:/d' -e '/^$$/d' -e 's/:.*//' < sgiImports | \	@@\
		sort | diff -w - latest_imports ; \			@@\
	then \								@@\
		touch $(CHECK_IMPORTS); \				@@\
	else \								@@\
		echo sgiImports file is obsolete and must be updated manually ; \	@@\
		exit 1 ; \						@@\
	fi								@@\
									@@\
latest_imports: $(sgi_SHARED_OBJS) $(sgi_SHLIB_UNSHARED_OBJS) other_imports @@\
	$(RM) lib.tmpr latest_imports					@@\
	ld -o lib.tmpr -r $(sgi_SHARED_OBJS)				@@\
	(nm -hu lib.tmpr ; (nm -he $(sgi_SHLIB_UNSHARED_OBJS) | egrep -v 'Undefined|Static|scNil') ; sed <other_imports -e 's/[ 	]*#.*//' -e '/^$$/d') \	@@\
		| sed -e 's/ *|.*//' | sort -u > latest_imports		@@\
	$(RM) lib.tmpr							@@\
									@@\
incompatible_imports: $(sgi_SHARED_OBJS) $(sgi_SHLIB_UNSHARED_OBJS) other_imports $(SHLIBUTILS)/imports.header $(SHLIBUTILS)/imports.tail	@@\
	rm -f lib.tmpr sgiImports					@@\
	ld -o lib.tmpr -r $(sgi_SHARED_OBJS)				@@\
	(cat $(SHLIBUTILS)/imports.header ; \				@@\
		(nm -hu lib.tmpr ; (nm -he $(sgi_SHLIB_UNSHARED_OBJS) | egrep -v 'Undefined|Static|scNil'); sed <other_imports -e 's/[ 	]*#.*//' -e '/^$$/d' )| \ @@\
		sed -e 's/ *|.*//' -e 's/$$/:0/' | sort -u ; \		@@\
		cat $(SHLIBUTILS)/imports.tail) > sgiImports		@@\
	$(RM) lib.tmpr							@@\
									@@\
cleanShlib::								@@\
	$(RM) lib.tmpr import.s latest_imports $(CHECK_IMPORTS)		@@\
									@@\
clean::									@@\
	$(RM) import.def.h


#define sgiSharedLibrarySyscalls(libname,down)				@@\
									@@\
$(sgi_UNGENERATED_SHARED_OBJS): import.syscalls.h			@@\
									@@\
import.syscalls.h: $(sgi_SYSCALLS)					@@\
	nm -B $(sgi_SYSCALLS) | fgrep ' T ' | sed -e 's/.* T //' -e 's/.*/#define & $(S_UNIQUE)&/' > import.syscalls.h @@\
									@@\
clean::									@@\
	$(RM) import.syscalls.h

#define sgiSharedLibraryExports(libname,down)				@@\
									@@\
CHECK_EXPORTS=check_exports						@@\
									@@\
$(CHECK_EXPORTS):  latest_exports sgiExports				@@\
	@echo "\t"diff sgiExports latest_exports			@@\
	@if sed -e '/[#]/d' \						@@\
		-e '/^$$/d' \						@@\
		-e 's/ [0-9][-0-9]*$$//' \				@@\
		-e 's/^	//' < sgiExports \				@@\
	| sort -u | diff - latest_exports ; \				@@\
	then \								@@\
		touch $(CHECK_EXPORTS); \				@@\
	else \								@@\
		echo sgiExports file is obsolete and must be updated manually ; \	@@\
		exit 1 ; \						@@\
	fi								@@\
									@@\
latest_exports:  $(sgi_SHARED_OBJS)					@@\
	$(RM) latest_exports						@@\
	(( cd shared ; nm -gB $(sgi_SHARED_OBJS)) \			@@\
	| sed -n -e '/^[^ ]* T /s/.* T //p' \				@@\
	| sort -u \							@@\
	) > latest_exports						@@\
									@@\
incompatible_exports: $(sgi_SHARED_OBJS) $(SHLIBUTILS)/exports.header $(SHLIBUTILS)/exports.tail $(EXPORTS_WARNING)	@@\
	$(RM) sgiExports						@@\
	( cat $(SHLIBUTILS)/exports.header ; \				@@\
	((cd down ; nm -gB $(sgi_SHARED_OBJS)) \			@@\
	| sed -n -e '/^[^ ]* T /s/.* T //p' \				@@\
	| sort -u ; sed -e s/LIB/libname/ $(SHLIBUTILS)/exports.tail) \	@@\
	| nl -nln \							@@\
	| sed 's/^\([0-9]*\)[ 	]*\(.*\)/\2 \1/' \			@@\
	) > sgiExports							@@\
									@@\
cleanShlib::								@@\
	$(RM) latest_exports $(CHECK_EXPORTS)

#define sgiSharedLibraryGlobals(libname,down)				@@\
									@@\
CHECK_GLOBALS=check_globals						@@\
									@@\
$(CHECK_GLOBALS): $(sgi_UNGENERATED_SHARED_OBJS) sgiGlobals		@@\
	@echo "\t"diff sgiGlobals latest_globals			@@\
	@if (cd down ; nm -B $(sgi_UNGENERATED_SHARED_OBJS)) | \	@@\
		grep ' [BDGSCE] ' | \					@@\
		sed 's/.* [BDGSCE] //' | \				@@\
		grep -v $(S_UNIQUE) | \					@@\
		sort | \						@@\
		diff sgiGlobals - ; \					@@\
		then \							@@\
			touch $(CHECK_GLOBALS); \			@@\
		else \							@@\
			echo new global symbols.  Update them and correct sgiGlobals file; \	@@\
		exit 1 ; \						@@\
	fi								@@\
									@@\
cleanShlib::								@@\
	$(RM) $(CHECK_GLOBALS)

#define sgiSharedLibraryConstants(libname,down)				@@\
									@@\
$(sgi_SHARED_OBJS) $(sgi_SHLIB_UNSHARED_OBJS): import.const.h		@@\
									@@\
CHECK_CONSTANTS=check_constants						@@\
									@@\
new_constants: $(sgi_CONSTANT_OBJS)					@@\
	$(RM) sgiConstants						@@\
	(echo '#WARNING, this file should be updated using make new_constants' ;\	@@\
	echo '#and checked in, whenever you get an error in building that' ;\	@@\
	echo '#indicates that the sgiConstants are out of date.' ;\	@@\
	echo '#do not update by hand.' ;\				@@\
	nm -B $(sgi_CONSTANT_OBJS) | \					@@\
	grep ' [DG] ' | \						@@\
	sed 's/.* [DG] //' | sort ; \					@@\
	) > sgiConstants						@@\
									@@\
$(CHECK_CONSTANTS): $(sgi_CONSTANT_OBJS) sgiConstants			@@\
	@echo "\t"diff sgiConstants latest_constants			@@\
	@$(RM) constants.tmpr						@@\
	@nm -B $(sgi_CONSTANT_OBJS) | \					@@\
	grep ' [DG] ' | \						@@\
	sed 's/.* [DG] //' | \						@@\
	sort > constants.tmpr						@@\
	@if sed < sgiConstants -e '/^#/d' | diff - constants.tmpr ; \	@@\
		then touch $(CHECK_CONSTANTS); \			@@\
		$(RM) constants.tmpr ; \				@@\
	else \								@@\
		echo sgiConstants changed.  Update them by running ; \	@@\
		echo make new_constants, check them in, and remake ; \	@@\
		$(RM) constants.tmpr ; \				@@\
		exit 1 ; \						@@\
	fi								@@\
									@@\
import.const.h: sgiConstants						@@\
	rm -f import.const.h						@@\
	( \								@@\
	echo "/* This file is generated automatically.  Do not edit it */" ; \	@@\
	sed -e '/#/d' -e 's/^[ 	]*//' -e '/^$$/d' -e 's/.*/#define & $(S_UNIQUE)&/' < sgiConstants ; \	@@\
	) > import.const.h						@@\
									@@\
cleanShlib::								@@\
	$(RM) $(CHECK_CONSTANTS) constants.tmpr				@@\
									@@\
clean::									@@\
	$(RM) import.const.h

#define sgiSharedLibrarySpec(libname,down)				@@\
									@@\
Concat3(lib,libname,.spec): sgiImports sgiExports Concat3(lib,libname,.spec.script) Concat3(lib,libname,.spec.skel) $(SHLIB_TRANSLATE)	@@\
	if [ ! -x Concat3(lib,libname,.spec.script) ] ; \		@@\
	then \								@@\
		chmod +x Concat3(lib,libname,.spec.script) ; \		@@\
	fi								@@\
	$(RM) Concat3(lib,libname,.spec)				@@\
	SHLIB_VERSION=$(SHLIB_VERSION) TARGET_NAME=$(TARGET_NAME) TARGET_PATH_NAME=$(TARGET_PATH_NAME) S_UNIQUE=$(S_UNIQUE) $(SHLIB_TRANSLATE) Concat3(lib,libname,.spec.skel) Concat3(lib,libname,.spec.script) sgiImports sgiExports import.o $(sgi_SHARED_OBJS) > Concat3(lib,libname,.spec.tmpr)	@@\
	$(MV) Concat3(lib,libname,.spec.tmpr) Concat3(lib,libname,.spec) @@\
	chmod -w Concat3(lib,libname,.spec)				@@\
									@@\
cleanShlib::								@@\
	$(RM) Concat3(lib,libname,.spec) Concat3(lib,libname,.spec.tmpr)

#endif /* sgiShlib */
