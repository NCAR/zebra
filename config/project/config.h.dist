/* -*- C -*-
 *
 * Zebra configuration parameters.
 * -------------------------------
 * In this file you can override any of the default configuration
 * parameters.  All of the parameters are definition directives for
 * the C pre-processor, of the form:

#define Symbol <definition>

 * To set a symbol to True or Yes or On, use

#define Symbol YES
  
 * To turn a parameter off or disable an option, use

#define Symbol NO

 * Some symbols are not YES or NO but actually directory names or commands.
 * If a Symbol is not defined in this file, it will be assigned a default
 * definition in the Zebra template file, Zeb.tmpl, in this directory.
 * Most of the defaults are mentioned in this file and there are
 * instructions for how to change many of the configuration parameters.
 * However, many more parameters exist.  If you think it necessary to
 * change some other parameters, such as when porting to a new platform,
 * look in the Zeb.tmpl file for all of the available parameters and their
 * defaults.  Also see Zeb-Imake.doc in this directory.  When in doubt
 * about a parameter, try the default first and then adjust it if it
 * doesn't work.
 */

/*============================== Don't change anything in this section ==*/
/*_/////////////////////////////////////////////////////////////////////-*/

# ifndef _zeb_config_h_		/* protect against multiple inclusion */
# define _zeb_config_h_

/*
 * Required when being included from a source file
 */
# ifndef YES
#	define YES 1
# endif
# ifndef NO
#	define NO 0
# endif

# ifdef MAKING_MAKEFILE
XCOMM -----------------------------------------------------------------------
XCOMM Definitions from config.h included here.  The definitions here override
XCOMM the defaults in Project.tmpl.  See ...../zeb/config/config.h.
XCOMM $Id: config.h.dist,v 1.26 1995-04-14 23:58:29 granger Exp $
XCOMM -----------------------------------------------------------------------
# endif

/*_/////////////////////////////////////////////////////////////////////-*/
/*=======================================================================*/

/*
 * Which help browser do you want to use?  If you set UseMosaic to YES,
 * then Mosaic will be used; otherwise the (old) xhelp browser will be
 * used.  Xhelp is almost certain to be removed from future releases, so
 * the use of Mosaic is recommended.  The default definition for UseMosaic
 * is YES.  Use the MOSAIC_COMMAND symbol to define a default path to
 * Mosaic; it can be either an absolute path or an executable name.  If
 * left commented out, zebra looks for Mosaic and xmosaic on your path.  If
 * defined, zebra checks the defined path before trying the other options.
 * The path must be quoted.
 *
 * The UseXHelp variable in the display manager can be used to override this
 * definition at run time.
 *
 * Mosaic's distribution conditions do not allow us to distribute the software,
 * but you can get it in binary or source form from ftp.ncsa.uiuc.edu.
 */
# define UseMosaic YES
/* # define MOSAIC_COMMAND "Mosaic" */

/*
 * If you're using Mosaic exclusively and do not want to build or install
 * the xhelp utility, define BuildXHelp to NO.  It defaults to NO if
 * UseMosaic is YES and BuildXHelp is not defined.  If you want the default
 * to be Mosaic, but you still want to compile xhelp capability, define
 * BuildXHelp to YES and UseMosaic to YES.  If BuildXHelp is NO, then zebra
 * will always try to use Mosaic no matter what (since xhelp won't be there).
 *
 * If you have Mosaic and will not be using older project configurations
 * such as the StormFEST CD's (which have project-specific info under xhelp),
 * then you may as well define this to NO.
 */
# define BuildXHelp YES

# ifdef MAKING_MAKEFILE
/*=======================================================================
 * CHECK THE FOLLOWING DEFINITIONS:
 * 
 * This section defines the directories in which Zebra files live.  These
 * are set-up for a default Zebra installation under /zeb, with the bin and
 * lib directories in /zeb/bin and /zeb/lib.  If you would like to change
 * the destination for Zebra, edit the definitions below.  The definitions
 * should be absolute paths and they should NOT be enclosed in quotes.
 * 
 * PLEASE NOTE:
 * Files will be installed into the LibDir, BinDir, and BaseDir/include
 * directories.  If you wish to preserve files already stored in these
 * directories, either move the directories BEFORE building Zebra or
 * specify different directory paths for the symbols below.  If you wish to
 * overwrite a previous version of Zebra, you might as well completely
 * erase the contents of BinDir so that programs which are no longer used
 * are not left taking up space.  */

# define BaseDir	/zeb
# define BinDir		BaseDir/bin
# define LibDir		BaseDir/lib
# define DataDir	/zeb/data
# define RDSSDir	/rdss

/*
 * If the UseInstalledZeb symbol is YES, Zebra executables will link with
 * the installed libraries instead of the libraries built in the source 
 * directories.  Sometimes it is more convenient to link with the source.
 * If you don't understand or don't care about the difference, leave this
 * as YES.
 */
# define UseInstalledZeb	YES

/*=======================================================================*/

/* =========================================================================
 * The following definitions determine which parts of the Zebra system will
 * be compiled and installed in the build process.
 *
 * 	YES --- The capability WILL be compiled into the system.
 * 	NO  --- The capability WILL NOT be included into the system.
 *
   ------------------------------------------------------------------------ */

/* 
 * Do you want to build any of Zebra's ingest modules?  Only recommended
 * for Sun machines, and only if you know that you need them.
 */
#define BuildIngest NO

/*
 * Here you can select which individual ingest modules to build.  
 * NONE of these will be built if BuildIngest is NO
 */
# define	BuildIngestScheduler	YES	/* Sun only	 	*/
# define	BuildClassIngest	YES
# define	BuildRadarIngest	YES	/* Sun only, see PCAP below*/
# define	BuildSLGrabber		YES	/* Sun only		*/
# define	BuildNowradIngest	YES
# define	BuildProfsIngest	YES
# define	BuildSatelliteIngest	YES
# define	BuildP3Composite	YES
# define	BuildTOGASlowTape	YES
# define	BuildSlowTapeIngest	YES
# define 	BuildTAOIngest		YES
# define	Build_GMS_ISCCP		YES
# define	Build_TRMM_SSMI		YES
# define	Build_TRMM_Rain		YES	/* Sun only		*/
# define	Build_TRMM_Sonde	YES
# define	Build_FEST_P3_C130	YES
# define	BuildPrecipIngest	YES
# define	BuildDAPIngest		YES
# define	BuildRAPDataServerIngest YES
# define	BuildWetnetIngest	YES

/*
 * The PAM ingest programs (pam_ingest and daypam_ingest) require libraries
 * which are compiled within the RDSS source tree.  Do not define this to YES
 * unless your RDSS source tree still contains the compiled mda, pamutil, and
 * unp libraries (i.e., it all built successfully and has not been cleaned).
 */
# define	BuildPamIngest		NO   /* Requires RDSS compiled tree */

/*
 * Set this if you want the ingest-oriented DataStore utilities (these being
 * NetXfr, LastData and Archiver).  Most sites do not need this stuff.  They
 * will not build properly under a non-ANSI compiler.
 */
# define	BuildRealtimeDataStoreTools	YES

/*
 * The data manager utilities are the programs dsmanage and tapeindex.
 * These are extremely useful in most environments, but not absolutely
 * necessary.  These programs require GNU's C++ compiler (g++), so if you 
 * do not have GNU's C++ compiler, define this to NO.  See further on in 
 * this file for information about specifying the C++ compiler.
 */
# define	BuildDataManager		YES

/*
 * The data file utilities are the program for handling various file 
 * and converting files to Zebra's netCDF conventions.  Some examples
 * are gprotocdf and mudtocdf, for GENPRO and MUDRAS, respectively.
 * Unless you know you will need them, you might as well wait and only
 * compile the programs you need when you need them.
 */
# define	BuildDataUtilities		NO

/* //// That's all of the defintions for choosing pieces to install.///// */
/* //// Go the next section for other compile configuration options ///// */
/*========================================================================*/


/*========================================================================
 * COMPILATION OPTIONS
 * -------------------
 *
 * In the following section, you can override any of the configuration
 * defaults.  In general, here you choose whether you want to compile with
 * MIT's X Windows or Sun's OpenWindows, and whether you want to use Sun's
 * C compiler, cc, or GNU C, gcc, or some other C compiler.  Other
 * parameters indicate the availability of certain capabilities utilized by
 * Zebra, such as the X Shared Memory extension.
 *
 * By default, the configuration will attempt to compile with your systems
 * default C compiler and link with X libraries from /usr/lib or any other
 * standard library directories.  You can link with MIT's X and still use
 * Zebra under OpenWindows, and vice versa.  Zebra must know if it is being
 * linked with OpenWindows, however, because the build must make some
 * adjustments in order to link properly.  If you have MIT's X
 * distribution, Release 4 or 5, use it.  If you only have OpenWindows,
 * version 2 or 3, then use that (the most recent version possible) and
 * define the UseOpenWindows symbol below to YES and the OpenWindowsVersion
 * symbol to the appropriate version number
 */

/*
 * Using Open Windows?  Define UseOpenWindows to YES, and be sure to 
 * define OpenWindowsVersion to the correct version number, either 2 or 3.
 * If the home directory of OpenWindows is not the default /usr/openwin,
 * then define OpenWinHome to the correct directory.
 */
# define UseOpenWindows 	NO	
# define OpenWindowsVersion 	3
# define OpenWinHome		/usr/openwin

/*
 * Does your X system support the shared memory extension?  The answer is
 * YES for MIT X, release 4 or greater, for Openwin 2.0 or above, and for
 * HPUX.  If unsure, run "xdpyinfo" and look for a line indicating the MIT-SHM
 * extension.
 */
# define XSharedMemory YES

/*
 * Compiler information:
 * If you have gcc (GNU C), we recommend that you use it.
 * If you wish to use gcc, simply define UseGcc to YES.
 *  - This setting automatically sets the CCompiler command
 *    (so don't override it) and any other necessary options
 * If you wish to use a C compiler other than the default,
 * define CCompiler to the C compiler command.  For most systems,
 * the default will be 'cc'.  Example: To use "acc" (the Sun ANSI C 
 * Compiler), use the following:
 *	# define CCompiler acc
 *
 * HPUX: Either gcc or the default "cc" command will work.  As of this
 * 	 writing, the version of gcc distributed by FSF does not support
 *	 debugging on the HP.  Either turn off "-g" below, or get the
 *	 special version at jaguar.cs.utah.edu.
 *
 * SGI:	 GCC works iff (1) you have Irix 5.2 or greater, and (2) you have 
 *	 gcc 2.6.1 or greater.  Lacking those, use of the native compiler
 *	 is highly recommended.
 */
# define UseGcc YES

/*
 * The PD monitor utility is an emacs program which provides interactive
 * run-time editing, checking, and monitoring of graphics processes' plot
 * descriptions.  If you have emacs (not version 19), and wish to compile
 * the emacs lisp code for the PD monitor, define HaveEmacs to YES and make
 * sure EmacsPath points to the emacs program.  The default is NO.  Even if
 * the elisp code is not compiled and installed, the elisp source files
 * will still be installed, so these can be used as is or byte-compiled
 * later.  If you have Emacs 19, the elisp code cannot be batch compiled,
 * so set HaveEmacs to NO. The Emacs 19 lisp file will still be installed.
 */
# define HaveEmacs NO
# define EmacsPath emacs

/*
 * Zebra uses the RDSS UI compiler to generate load files for much of its
 * user interface.  If the UI compiler, uic, is not in your path, define
 * the full path of uic, including the executable name, in the symbol
 * UicCmd.  The default value is just 'uic'.
 */
/* # define UicCmd /rdss/bin/uic */

/*
 * If you wish to compile dsmanage and tapeindex, you need to specify
 * a C++ compiler, like Sun's CC or GNU's g++.  If you defined UseGcc
 * to YES above, g++ will be used for the C++ compiler.  Otherwise the
 * default is CC.  To define a different C++ compiler, define
 * CccCompiler to the name of the compiler.  If the compiler requires
 * any special library options, define them in CccLibs.  The C debug
 * flags and options (defined below) will be passed to the C++
 * compiler as well.  Options specific to the C++ compiler should
 * be defined in CccOptions.
 */
#define CccOptions

/*
 * To set debugging flags for the FORTRAN and C compilers' command
 * lines, define the symbols CDebugFlags and FortDebugFlags.
 * The default is no debugging.  Note that for most compilers
 * (gcc is an exception), the -g and -O flags cannot be combined.
 * On Sun's, a debugging flag will disable optimization.  The FORTRAN
 * should probably always be optimized, so make sure FortDebugFlags
 * does not disable optimization by specifying any debug flags.
 *
 */
# define CDebugFlags -g
/* # define FortDebugFlags -g */

/*
 * To change other compiler command line options, such as required by your
 * compiler (floating point stuff, etc.), or optimization flags, define
 * CCOptions and FortOptions.  The default is optimization, -O.
 *
 * HP-UX: Do NOT turn on the ANSI ("-Aa") option with the HP native compiler,
 *	  or you will encounter more weirdness than you ever wished to deal
 *	  with.  You must also provide the "+ppu" fortran option or you will
 *	  get undefined externals when you link the graphics process.
 *
 */
# define CCOptions -O

#ifdef HPArchitecture
# define FortOptions -O +ppu
#else
# define FortOptions -O
#endif
/* # define FortOptions -O +ppu */	/* HPUX version */

/*
 * During compilation, Zebra's source files must be able to find lots
 * of include files.  By default, your compiler should check the
 * standard include directories like /usr/include.  If the header files
 * for any package that Zebra requires are not in some standard location,
 * the correct directories need to be defined here.  Note that even if
 * an include directory is in a compiler's default path, it may not be
 * in makedepend's. If in doubt, try the defaults first.
 * The available symbols are:
 *
 *	XIncDir		-- Location of X header files.  By default,
 *			   this will be $OPENWINHOME/include if you
 *			   are using OpenWindows.  Otherwise it will
 *			   be empty (i.e. rely on the compiler to search
 *			   the standard include directories).
 *	NetCDFIncDir    -- Location of netCDF header files.  The default
 *			   is empty (use system's default include directories).
 *	RDSSIncDir	-- RDSS include files.  The default is RDSSDir/include.
 *			   If not defined above, RDSSDir is /rdss.
 *
 * Note that gcc will search /usr/local/include by default, most other
 * compilers will not.
 */

#ifdef HPArchitecture
# define XIncDir /usr/contrib/mitX11R5/include	/* HP-UX version */
#else
/* # define XIncDir /local/X11R5/include */
#endif

#define NetCDFIncDir /usr/local/include

/*
 * During linking, the linker must be told where to find the libraries 
 * for the various packages which Zebra requires.  The locations of these
 * libraries can be defined in the following parameters.  All of these
 * default to empty, meaning that the libraries will be found in the
 * system's default library search path.  If any of these are defined, then
 * they will automatically be included in a -L option to the compiler,
 * unless they are overridden by XLibraries, NetCDFLibrary, or RDSSLibrary
 * below.
 *
 * 	XLibDir		-- Location of X libraries.
 *	NetCDFLibDir    -- Location of the netCDF library.
 *	RDSSLibDir	-- RDSS Library directory.  IF NOT INSTALLED IN
 *			   /usr/local/lib OR /usr/lib, DEFINE A DIRECTORY
 *			   BELOW.
 *
 * WARNING: If any of the following libraries are in /usr/lib and you are
 * building on a Sun, DO NOT specify /usr/lib explicitly.  Otherwise you
 * will run into extremely weird linking problems involving the fact that
 * Sun provides at least three math libraries and you HAVE to get the right
 * one.
 */

/* # define XLibDir /local/X11R5/lib */
/* # define XLibDir /usr/contrib/mitX11R5/lib */ /* for HPUX */

/* # define RDSSLibDir /rdss/lib */		/* common RDSS installation */
/* # define RDSSLibDir /usr/local/lib */	/* not needed with gcc */

/* # define NetCDFLibDir /usr/local/lib */	/* not needed with gcc */

/*
 * To specify the whole command-line option for a library use the symbols
 * XLibraries, NetCDFLibrary, RDSSLibrary.  For example, to use a 
 * version of RDSS which has a different name, use 
 *
 * #define RDSSLibrary -L/usr/local/lib -lrdssui2 -lrdssutil2
 *
 * which on most UNIX systems is equivalent to
 *
 * #define RDSSLibrary /usr/local/lib/librdssui2.a \
 * 		       /usr/local/lib/librdssutil2.a
 *
 * Note that defining one of the 'Library' symbols as above will completely
 * circumvent the definition of the corresponding 'LibDir' symbol.  
 * FOR ALMOST ALL INSTALLATIONS, it should only be necessary to specify
 * library directories via the XLibDir, RDSSLibDir, and NetCDFLibDir symbols,
 * meaning the symbols XLibraries, NetCDFLibrary, and RDSSLibrary do not
 * need to be defined here. (The names of the libraries will be added
 * automatically to the LibDir symbols.)
 *
 * If you need to define the actual command-line option for specifying
 * some or all of the libraries, you can change several parameters.
 * All of these parameters will default to the specified library directory
 * (such as those that may have been defined above) and the standard
 * name of the library: e.g. -L<libdir> -l<libname>.  The default is
 * listed to the right of each of the parameter names.
 *
 * For these 3 libraries, it is unlikely that the defaults will not be
 * sufficient:
 *
 *	XLibraries	-lXaw -lXmu -lXt -lXext -lX11
 *	NetCDFLibrary	-lnetcdf
 * 	RDSSLibrary	-lrdssui -lrdssutil
 *
 * The following 2 libraries will probably need to be explicitly
 * defined here, but ONLY if you need them for ingest modules.
 *
 * The SUDS library is only needed for the PAM and CLASS ingest modules.
 *
 *	SudsLibrary	$(RDSSDIR)/suds/libsuds.a
 *
 * The 'PAM configuration library', libunp.a, is only needed by
 * the PAM ingest module.
 *
 *	PamCfgLibrary	-lunp
 *
 * If you don't need to ingest any PAM or CLASS data (which will be the
 * case 99% of the time), you can safely ignore the definition of the
 * two symbols above.
 */

/*
 * This one works if the RDSS source tree is in /rdss and has not been cleaned
 */
/* # define PamCfgLibrary /rdss/pam/cfg/access/libunp.a */

/*
 * This one is for RDSS libraries installed into /usr/local/lib
 */
/* # define PamCfgLibrary /usr/local/lib/libunp.a */

/*
 * If you have a nonstandard Fortran compiler (i.e. you "make" won't figure
 * it out automatically) set it here.  (This example for the GNU compiler).
 */
/* # define FortranCompiler g77 */

/*
 * FORTRAN libraries tend to be very system-specific.  Define this
 * parameter to be the command-line options necessary to link with
 * the FORTRAN libraries on your system.
 *
 * Fortran libraries are needed to build the graphics process.  
 */

/* 
 * Default: SunOS 4 with Fortran SC1.x (comment or remove this definition 
 * if you use a different one)
 */
# define FortranLibraries -L/usr/lang/SC1.0.1 -lF77 -lV77

/*  SunOS 4 with gcc or cc and FORTRAN SC2.x */
/* # define FortranLibraries \
  -L/usr/lang/SC2.0.1 -lF77 -lV77 -lM77 -lansi /usr/lang/SC2.0.1/values-Xa.o */

/* SunOS 4 with acc and FORTRAN SC2.x */
/* # define FortranLibraries -L/usr/lang/SC2.0.1 -lF77 -lV77 -lM77 -lansi */

/* Solaris, C2 and C3.0.  -lsunmath doesn't get linked into /opt/SUNWspro/lib
 * so it really does have to point explicitly at SC3.0...*/
/* # define FortranLibraries -L/opt/SUNWspro/SC2.0.1 -lF77 -lV77 */
/* # define FortranLibraries -L/opt/SUNWspro/SC3.0/lib -lF77 -lV77 -lsunmath */
/*
 * Solaris, SC3.0.1, for some reason (for some programs) now requires M77
 */
/* # define FortranLibraries -L/opt/SUNWspro/SC3.0.1/lib \
		-lF77 -lV77 -lM77 -lsunmath */

/* HP-UX */
/* # define FortranLibraries -lU77 -lf -lisamstub */

/* IRIX 5.x */
/* # define FortranLibraries -lF77 -lI77 -lisam */

/* G77 -- may also have to give -L if not linking with gcc */
/* # define FortranLibraries -lf2c */

/*
 * Some of Zebra's routines require the terminal capability library,
 * usually /usr/lib/libtermcap.a, and the math library, /usr/lib/libm.a.
 * These are the symbols and their defaults:
 *
 *	MathLibrary	-lm
 *	TermcapLibrary	-ltermcap
 *
 * To change these definitions, use your compiler's options for 
 * specifying libraries on the command line, such as -L for 
 * search directories and -l for library names.
 */

# define MathLibrary	-lm
# define TermcapLibrary -ltermcap

/*
 * Building the radar ingestor now requires the PCAP library from
 * ftp.ee.lbl.gov.  If you want this module be sure that the symbol
 * below is set such that the linker will find the library; if you're
 * not using the radar ingestor (99.9% of all Zebra users), you can ignore
 * all this.
 */
# define PCAPLibrary 	-lpcap

/*========================================================================
 * Distribution Options
 *------------------------------------------------------------------------
 * This section of definitions is meant for those who are creating a
 * customized Zebra distribution.  If you are only installing Zebra at your
 * local site, then you are finished configuring Zebra.  Save this file and
 * continue with the installation instructions.  Otherwise, read on.
 *
 * Zebra's Imakefiles contain several built-in features meant for creating
 * and customizing Zebra distribution trees.  In particular, here are some
 * important targets to be familiar with:
 *
 * distfiles::		Echoes to the terminal the path names of all files
 *			which are meant to be distributed in a directory
 *			and all of the subdirectories.  By setting the
 *			DISTCURDIR variable on the command line, all of the
 *			file names printed will be prefixed with the value
 *			of the variable.  See the tarfile: target in the
 *			top-level Imakefile for an example of how this can
 *			be used.
 *
 * distmakefiles::	Makes Makefiles for ALL of the distribution 
 *			directories, not just those which have been "turned
 *			on" to be built.  This is necessary before performing
 *			other dist targets in order to create the Makefile
 *			which the dist targets will operate on.
 *
 * distclean::		Cleans in ALL directories in the distribution.  This
 *			is useful when programs have been compiled
 *			explicitly from within a directory which has been
 *			disabled in the regular distribution tree.  From the
 *			top-level, this target also removes the ./bin and
 *			./lib directories, and cleans in ./imake, so use
 *			it with caution.
 *
 * In addition to the symbols above which control which parts of a 
 * distribution are being compiled, other symbols control which parts
 * belong to the distribution:
 *
 * DistributeIngest	If YES, zeb/src/ingest is expected to be in the
 *			distribution, and all of its files and directories
 *			will be included in any distfiles operations.
 *
 * DistributeOptimzer	If YES, zeb/src/Optimizer is expected to be in the
 *			distribution tree.
 *
 * DistributeDataUtils	YES when the zeb/src/datautil directory is part 
 *			of the distribution.
 *
 * DistributeXHelp	If YES, the makefile in zeb/src tries to build
 *			and install in zeb/src/xhelp.  Otherwise, the
 *			xhelp directory can be removed without harm.  Use
 *			this to build distributions which will always
 *			use the Mosaic help interface.
 *
 * Therefore, if you wanted to create a distribution which did not contain
 * the ingest directory, Optimizer, data utilities, or xhelp, uncomment the
 * following lines:
 */

/* #define DistributeIngest 	NO */
/* #define DistributeOptimizer 	NO */
/* #define DistributeDataUtil 	NO */
/* #define DistributeXHelp	NO */

/* Next, update ALL of the distributed Makefiles with 'make distmakefiles'.
 * Now you have two options:
 *
 *	Use the top-level tarfile target to create a distribution tar file,
 *	which will NOT contain ingest, Optimizer, datautils, or xhelp.
 *
 * 	Explicitly remove the ingest, Optimizer, datautils, and xhelp
 * 	directories from your distribution.  As long as the above symbols
 * 	are NO, the Imakefiles will never try to access those directories,
 * 	even for any of the dist* targets.  If using a "pruned"
 * 	distribution tree, make sure the symbols always stay set
 * 	appropriately.
 */
 
/* Two more symbols are also available: */

/* #define DistributeRealtimeDataStoreTools NO */
/* #define DistributeDataManager NO */

/* Any of the distribution symbols which are not defined default to YES.
 * Questions about any of this can go to granger@ncar.ucar.edu
 * Also see 'zeb/imake/Zeb-Imake.doc'.
 */

/*========================================================================*/
# endif /* MAKING_MAKEFILE */

/*========================================================================
 * Selecting Graphics Process Plot Types
 *------------------------------------------------------------------------
 * The following definitions allow you to configure in or out various
 * pieces of the Zebra graphics process.  There are very few cases in which
 * it is desirable to change any of the following.
 *------------------------------------------------------------------------*/
/*
 * --- The various plot types ---
 */
# define C_PT_CAP	YES		/* Constant altitude plots	*/
# define C_PT_SKEWT	YES		/* Skew T plots			*/
# define C_PT_XSECT	YES		/* Cross section plots		*/
# define C_PT_TSERIES	YES		/* Time series plots		*/
# define C_PT_XYGRAPH	YES		/* XY-Graph plots		*/
# define C_PT_XYWIND	YES		/* XY-Graph wind plots		*/

/*
 * --- CAP subplots ---
 *
 * Define these YES if you want them.  If C_PT_CAP above is not YES, then
 * ALL of these definitions will be ignored and none of these plots will
 * be built.  Again, it is rare that anyone would want or need to define
 * any of these to NO.
 */
# if C_PT_CAP
#	define C_CAP_OVERLAY	YES	/* Overlays			*/
#	define C_CAP_VECTOR	YES	/* Vector plots			*/
# 	define C_CAP_LIGHTNING	YES	/* Lightning location		*/
#	define C_CAP_RASTER	YES	/* Raster plots			*/
#	define C_CAP_TRACKS	YES	/* Track plots (e.g. aircraft)	*/
# endif
/*------------------------------------------------------------------------*/


/*========================================================================
 * Customization Options
 *------------------------------------------------------------------------
 * Several parameters used throughout the Zebra distribution can be
 * modified by setting them here rather than changing them in all of the
 * include files.  The intention is that certain projects can keep their
 * settings in this file and turn them on by defining a single symbol, like
 * ARM_PROJECT for the ARM project.  All of the symbols defined here have
 * the prefix 'CFG_'.  If a symbol is not defined, then the include files
 * use their own defaults.
 */

/* #define ARM_PROJECT		*/
/* #define NEXUS_PROJECT	*/

/*------------------------------------------------------------------------
 * //////////////////// Settings for the ARM project /////////////////////
 *------------------------------------------------------------------------*/
#ifdef ARM_PROJECT

#define CFG_DC_MAXFIELD 150	/* Maximum allowable fields in one datachunk */
#define CFG_DC_MF_HASH_SIZE 256	/* Least power of 2 > (not =) CFG_DC_MAXFIELD*/

#define CFG_DATAFILE_LEN	50
#define CFG_PLATNAME_LEN	100

/*
 * Set fields table limits to accept longer ARM names and descriptions
 */
# define CFG_FIELD_MAX_ID	512
# define CFG_FIELD_NAME_LEN	40
# define CFG_FIELD_LONG_LEN	256
# define CFG_FIELD_UNITS_LEN	40

/*
 * If defined, DC field attributes will override the fields table when 
 * writing field attributes to a file.
 */
#define CFG_NC_DCATTS_OVERRIDE

/*
 * If defined, a bad value attribute is not written to data files for any
 * field, and missing_value attributes in netCDF files are ignored.
 */
#define CFG_NO_BADVALUES

/* 
 * The default altitude units for datachunks and for netCDF files whose alt
 * field does not have a units attribute (or has a blank one).  If the
 * altitude units of a datachunk are not explicitly overridden, this will
 * be the units which are stored in the "units" attribute of the "alt"
 * field in netCDF files.
 */
#define CFG_ALTITUDE_UNITS	AU_mMSL

#define DistributeIngest 	NO
#define DistributeOptimizer 	NO

#endif /* ARM_PROJECT */
/*------------------------------------------------------------------------*/


/*------------------------------------------------------------------------
 * //////////////////////// Settings for NEXUS ///////////////////////////
 *------------------------------------------------------------------------*/
#ifdef NEXUS_PROJECT

#define DistributeIngest 	NO
#define DistributeOptimizer 	NO
#define DistributeDataUtil 	NO
#define DistributeRealtimeDataStoreTools YES
#define DistributeDataManager NO

#endif /* NEXUS_PROJECT */
/*------------------------------------------------------------------------*/


/*------------------------------------------------------------------------*/
/* ------------------ Defaults for compile-time constants ----------------*/
/*------------------------------------------------------------------------*/
/* The definitions below will not usually need to be changed, but they are
 * provided here so that they can be conveniently found and changed in
 * single file.  DO NOT EDIT THESE UNLESS YOU KNOW WHAT YOU ARE DOING!  If
 * any of these definitions are unreasonable or downright incorrect, you
 * may not be able to compile or run Zebra.
 **************************************************************************/

/*
 * If defined, the 'alt' field will not be given a 'units' attribute in
 * netCDF files.
 */
/* #define CFG_NC_NO_ALT_UNITS */

/*
 * Various string length limits
 */
#ifndef CFG_PLATNAME_LEN
#define CFG_PLATNAME_LEN 160	/* Len of platform names		     */
#endif
#ifndef CFG_DIMNAME_LEN
#define CFG_DIMNAME_LEN	32	/* Longest allowable dimension name	     */
#endif
#ifndef CFG_PDPARAM_LEN
#define CFG_PDPARAM_LEN	40	/* Length of parameter names	*/
#endif
#ifndef CFG_ASCTIME_LEN
#define CFG_ASCTIME_LEN	40	/* Length needed for encoded times*/
#endif
#ifndef CFG_PLATCLASS_LEN
#define CFG_PLATCLASS_LEN 80	/* Len of platform class names		     */
#endif
#ifndef CFG_PLATDIR_LEN
#define CFG_PLATDIR_LEN	100	/* Len of platform directory path	     */
#endif
#ifndef CFG_FILENAME_LEN
#define CFG_FILENAME_LEN 32	/* Len of general file names (not full paths)*/
#endif
#ifndef CFG_DATAFILE_LEN
#define CFG_DATAFILE_LEN 40	/* Len of data file names (not full paths)   */
#endif
#ifndef CFG_FILEPATH_LEN
#define CFG_FILEPATH_LEN 256	/* Len of full path filenames		     */
#endif
#ifndef CFG_PDNAME_LEN
#define CFG_PDNAME_LEN	40	/* Len of name of a plot description table   */
#endif
#ifndef CFG_MSGNAME_LEN
#define CFG_MSGNAME_LEN	32	/* Max length of a message client name	     */
#endif
#ifndef CFG_MSGEVENT_LEN
#define CFG_MSGEVENT_LEN 200	/* Length of extended logger event messages  */
#endif
#ifndef CFG_FIELD_NAME_LEN
#define CFG_FIELD_NAME_LEN 40	/* Length of field names		     */
#endif
#ifndef CFG_FIELD_LONG_LEN
#define CFG_FIELD_LONG_LEN 80	/* Length of field description (long name)   */
#endif
#ifndef CFG_FIELD_UNITS_LEN
#define CFG_FIELD_UNITS_LEN 20	/* Length of field units string		     */
#endif
#ifndef CFG_SEARCHPATH_LEN
#define CFG_SEARCHPATH_LEN 512	/* Length of exec search paths and such	     */
#endif

/*
 * Maximum number of fields (field IDs) in the fields table
 */
#ifndef CFG_FIELD_MAX_ID
#define CFG_FIELD_MAX_ID	512
#endif

/*
 * Maximum number of top level platforms (doesn't include subplatforms)
 */
#ifndef CFG_MAX_PLATFORMS
#define CFG_MAX_PLATFORMS 2048
#endif

/*
 * DataChunk symbols
 */
#ifndef CFG_DC_MAXFIELD
#define CFG_DC_MAXFIELD	100	/* Maximum allowable fields in one datachunk */
#endif
#ifndef CFG_DC_MF_HASH_SIZE
#define CFG_DC_MF_HASH_SIZE 128	/* Least power of 2 > (not =) CFG_DC_MAXFIELD*/
#endif
#ifndef CFG_DC_MAXDIMN
#define CFG_DC_MAXDIMN	30	/* Max number of dimensions for NSpace chunk,*/
                                /* should be less than netCDF limit	     */
#endif
#ifndef CFG_DC_DEFAULT_BADVAL
#define CFG_DC_DEFAULT_BADVAL -99999.9	/* Default bad value 		     */
#endif

/*
 * Plot desctiption limits
 */
#ifndef CFG_PD_MAXCOMP
#define CFG_PD_MAXCOMP	50	/* Maximum # components expected in a PD     */
#endif
#ifndef CFG_PD_RAWTEMP
#define CFG_PD_RAWTEMP	40960	/* Raw temp buffer space for raw PD's	     */
#endif

/*
 * Message manager limits
 */
#ifndef CFG_MSG_MAXBCAST
#define CFG_MSG_MAXBCAST 1500	   /* Maximum length of a broadcast message  */
#endif
#ifndef CFG_MSG_DEFAULT_PORT
#define CFG_MSG_DEFAULT_PORT 1500  /* Default tcp port			     */
#endif
#ifndef CFG_MSG_SOCKET_NAME
#define CFG_MSG_SOCKET_NAME "/tmp/fcc.socket"
                         /* UNIX domain socket name in file system namespace */
#endif

/*
 * Display manager limits
 */
#ifndef CFG_DM_CODELEN
#define CFG_DM_CODELEN	20	/* Length of a DM event code	*/
#endif
#ifndef CFG_DM_MAXADATA
#define CFG_DM_MAXADATA 128	/* Length of DM action data	*/
#endif

/*
 * Other parameters
 */
#ifndef CFG_ALTITUDE_UNITS
#define CFG_ALTITUDE_UNITS 	AU_kmMSL /* Default units for "alt" field */
#endif
/*------------------------------------------------------------------------*/



/*-//////////////////////////////////////////////////////////////////////-*/
/*========================================================================
 * ////////    You are now finished configuring Zebra!     ///////////////
 * ////////           DO NOT EDIT ANY FURTHER!	           ///////////////
 * ////////     Save this file and continue with the	   ///////////////
 * ////////         installation instructions...	   ///////////////
 *========================================================================*/
/*-//////////////////////////////////////////////////////////////////////-*/



/*------------------------------------------------------------------------*/
/*
 * These are always NO -- do not change them!
 */
# if !C_PT_CAP
#	define C_CAP_OVERLAY	NO	/* Overlays			*/
#	define C_CAP_VECTOR	NO	/* Vector plots			*/
# 	define C_CAP_LIGHTNING	NO	/* Lightning location		*/
#	define C_CAP_RASTER	NO	/* Raster plots			*/
#	define C_CAP_TRACKS	NO	/* Track plots			*/
# endif

/*
 * Some parameters for dealing with buffer lengths.
 */
# define MAX_PLAT_LEN	160	/* Maximum platform len -- remember lists */
# define MAX_PARAM_LEN	40	/* Length of parameter names		*/
# define TIME_LEN	40	/* Length needed for encoded times	*/

/*
 * If we're not installing xhelp, then zebra programs need to be told
 * not to look for it or include the xhelp header file.
 */
#ifndef BuildXHelp
#if UseMosaic
#define BuildXHelp NO
#else
#define BuildXHelp YES
#endif /* UseMosaic */
#endif

# if BuildXHelp
# 	define SUPPORT_XHELP
# endif

# endif /* ! _zeb_config_h_ */
