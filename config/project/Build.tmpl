/* -*- C -*-
 *
 * Development build parameters.  When processed, this file expects the
 * architecture symbols to be defined.  Defaults are chosen for the
 * Makefile configuration symbols according to architecture.  Only those
 * symbols which differ from their defaults (given in Project.tmpl) are
 * defined here.
 */

XCOMM -----------------------------------------------------------------------
XCOMM Zebra project auto-build parameters for development compilations
XCOMM $Id: Build.tmpl,v 1.42 2000-09-08 15:02:41 granger Exp $
XCOMM -----------------------------------------------------------------------

/*
 * Convenience definition
 */
#ifndef SolarisArchitecture
# ifdef SunArchitecture
#  if defined(SVR4) || defined(solaris) || defined(SVR4Architecture)
#   define SolarisArchitecture
#  endif
# endif
#endif

# ifndef OSMajorVersion
#  ifdef HPArchitecture			/* fuggles */
#   define OSMajorVersion 10
#  endif
#  ifdef SGIArchitecture		/* saaz and iita */
#   define OSMajorVersion 6
#  endif
#  ifdef LinuxArchitecture		/* linus */
#   define OSMAjorVersion 2
#  endif
#  ifdef SunArchitecture
#   ifdef SolarisArchitecture		/* steam and stout */
#    define OSMajorVersion 5
#   else
#    define OSMajorVersion 4		/* narnia */
#   endif
#  endif
# endif /* ! OSMajorVersion */

/*
 * The symbol for doing builds for binary distributions.  This does not
 * imply static linking on all architectures. (e.g. implies dynamic linking
 * of OpenWindows on SunOS and Solaris).
 */
#ifdef AutoBinary
XCOMM --- Auto-binary distribution
#endif

#ifndef UseInstalledZebra
# define UseInstalledZebra	NO
#endif
#ifndef BuildIngest
# define BuildIngest		NO
#endif
/*
 * For development, default to omitting xhelp.  To include xhelp, define
 * this to YES and define SUPPORT_XHELP in the AUTO_DEFINES.
 */
#ifndef BuildXHelp
# define BuildXHelp		NO
#endif

#ifndef UseGcc
# define UseGcc YES
#endif

/*
 * We require g++ (see config.h.dist for the reasons...)
 */
# define HasCplusplus YES
# define CplusplusCmd g++

/*
 * See if we're supposed to build RDSS in this tree also; default to YES
 */
#ifndef BuildRDSS
#define BuildRDSS YES
#endif

/*
 * Default to HDF on all architectures -X-X-X- Disabled til further notice
 */
#ifndef HasHDF
# define HasHDF NO
#endif
#ifndef HasHDF
# ifndef LinuxArchitecture /* alas, cannot yet compile HDF on linux */
#  define HasHDF YES
# else
#  define HasHDF NO
# endif /* ndef linux */
#endif /* ndef HasHDF */
#define HDFIncDir /usr/local/hdf/include
#define HDFLibDir /usr/local/hdf/lib
#ifdef AutoBinary
/*
 * Version 4.0 HDF requires zlib.
 */
# define HDFLibrary HDFLibDir/libdf.a HDFLibDir/libz.a
#endif

/*
 * Sweepfile stuff is in flux, and depends on the architecture
 */
# ifndef HasSweepFiles
#   ifdef SolarisArchitecture
#     define HasSweepFiles YES
#     define SweepFileIncDir /usr/local/include
#     define SweepFileLibrary /usr/local/lib/ddmlib.a
#   endif
#   ifdef LinuxArchitecture
#     define HasSweepFiles YES
#     define SweepFileIncDir /usr/local/include
#     define SweepFileLibrary /usr/local/lib/ddmlib.a
#   endif
#   ifndef HasSweepFiles
#     define HasSweepFiles NO
#   endif
# endif

/*
 * Map projections are installed on all our machines, and now that we're
 * only supporting ANSI-capable compilers, project.h should be compilable.
 */
#ifndef MapProjections
# define MapProjections YES
#endif

#if MapProjections
# define ProjLibDir /usr/local/lib
# define ProjIncDir /usr/local/include
# ifdef AutoBinary
#  define ProjLibrary ProjLibDir/libproj.a
# endif
#endif

/*
 * To get CVS ignore rules
 */
#define HasCvs YES
/* #define WantCvsIgnore NO */

/*
 * If a BaseDir is defined, use it to give defaults to BinDir and LibDir.
 * Otherwise BinDir and LibDir default to relative paths in Project.tmpl,
 * and BaseDir defaults to /zebra.
 */
#ifdef BaseDir
# ifndef BinDir
#  define BinDir BaseDir/bin
# endif
# ifndef LibDir
#  define LibDir BaseDir/lib
# endif
# ifndef IncDir
#  define IncDir BaseDir/include
# endif
#endif

/*
 * Default to NO data utilities for all architectures, Sun included.
 */
# ifndef BuildDataUtilities
#  define	BuildDataUtilities	NO
# endif

#if defined(SunArchitecture)

# define	BuildIngestScheduler	YES	/* SunOS/Solaris 	*/
# ifndef BuildDataUtilities
#  define	BuildDataUtilities	YES	/* SunOS/Solaris	*/
# endif
# ifdef SolarisArchitecture /* Solaris only */
#  define	BuildRadarIngest	YES	/* Solaris only		*/
#  define	BuildSLGrabber		NO
#  define	Build_TRMM_Rain		NO
# else /* SunOS only */
#  define	BuildRadarIngest	NO
#  define	BuildSLGrabber		YES	/* SunOS only		*/
#  define	Build_TRMM_Rain		YES	/* SunOS only		*/
# endif

#else /* all other architectures */

# define	BuildIngestScheduler	NO
# ifndef BuildDataUtilities
#  define	BuildDataUtilities	NO
# endif
# define	BuildRadarIngest	NO
# define	BuildSLGrabber		NO
# define	Build_TRMM_Rain		NO

#endif /* SunArchitecture */

# define	BuildClassIngest 	NO /* needs libsuds.a from RDSS tree */
# define	BuildPamIngest			NO
# define	BuildRealtimeDataStoreTools	YES

/* Shared zebra module and Python utils only build on Linux at the moment */
#ifdef LinuxArchitecture
# define 	BuildPythonUtils 	YES
#else
# define        BuildPythonUtils	NO
#endif

#ifdef SunArchitecture
# ifndef UseOpenWindows
#  ifdef AutoBinary
#   define UseOpenWindows 	YES
#  else
#   define UseOpenWindows 	NO	
#  endif
# endif
# define OpenWindowsVersion 	3
# define OpenWinHome		/usr/openwin
#else
# ifdef UseOpenWindows
#  undef UseOpenWindows
# endif
# define UseOpenWindows 	NO	
#endif

#define XSharedMemory YES

XCOMM --- Deciding C compiler and options

/*
 * Decide whether to automatically turn on static linking based on
 * existence of AutoBinary.  For now it defaults to being left undefined.
 */
#ifdef AutoBinary
/* # if !defined(SunArchitecture) && !defined(AutoStatic) */
/* #  define AutoStatic */
/* # endif */
#endif

/*
 * Determine the static binding options for this machine/compiler pair.
 */
#ifdef AutoBinary
# ifdef HPArchitecture
#  if UseGcc
#   define StaticLoadOption -Xlinker -a -Xlinker archive_shared
#   define ExtraLibraries -ldld
#  else
#   define StaticLoadOption -a archive_shared
#   define ExtraLibraries -ldld
#  endif
# endif
#endif

/*
 * The static compiler option gets determined here, but it only gets
 * used if AutoStatic is defined.
 */
#ifndef StaticFlag
# if UseGcc
#  define StaticFlag -static
# else /* oh well */
#   define StaticFlag /**/
# endif
#endif

/*
 * Existence of an AutoStatic symbol sets our flags for static linking.
 */
#ifdef AutoStatic
# ifndef CDebugFlags
#  define CDebugFlags -g StaticFlag
# endif
# ifndef CplusplusDebugFlags
#  define CplusplusDebugFlags CDebugFlags StaticFlag
# endif
#endif /* Static */   

#ifndef CDebugFlags
# define CDebugFlags -g
#endif

#ifndef CplusplusDebugFlags
# define CplusplusDebugFlags CDebugFlags
#endif

/*
 * Some machine/compilers use a load option for AutoBinary.
 * The default is empty.
 */
#ifndef StaticLoadOption
# define StaticLoadOption /**/
#endif

#ifdef HPArchitecture
# define ExtraLoadOptions -Xlinker +vnocompatwarnings StaticLoadOption
#endif

#ifdef SGIArchitecture
# if !UseGcc
#  define CCompiler cc -n32
# endif

 /* 
  * The "-woff 85" loader flag suppresses warnings about multiple
  * vendorShellClass symbols in IRIX Xaw and Xt libraries.  The "-woff
  * 84" flag suppresses warnings about libraries not used to resolve any
  * symbols.  We also suppress warning 131 (Multiply defined weak
  * symbol), since this is a very common warning when using C++
  * templates.  Suppress warning 47 about possible branch instruction 
  * performance hits.  Finally, The "-rpath" allows us to avoid requiring
  * everybody to have a LD_LIBRARY_PATH set to run stuff linked to
  * locally-built shared libraries. 
  */
# define ExtraLoadOptions -Wl,-woff,85 -Wl,-woff,84 -Wl,-woff,131 \
	-Wl,-woff,47 -Wl,-rpath,/usr/local/lib StaticLoadOption
#endif


XCOMM --- Deciding X, RDSS and netCDF library directories

#if defined(HPArchitecture)
# if OSMajorVersion < 10
#  define XLibDir /usr/contrib/mitX11R5/lib	/* contrib for HP */
#  define XIncDir /usr/contrib/mitX11R5/include
# else
#  define XLibDir /usr/X11R6/lib
#  define XIncDir /usr/X11R6/include
# endif
#endif /* HPArchitecture */

#if defined(SGIArchitecture)
/* # define XLibDir /usr/lib */		/* leave it empty for SGI */
#endif /* SGIArchitecture */

#if defined(LinuxArchitecture)
# define XLibDir /usr/X11R6/lib
# define XIncDir /usr/X11R6/include
#endif /* LinuxArchitecture */

#if defined(SunArchitecture)
# if ! UseOpenWindows	/* otherwise use default in Project.tmpl */
#  if defined(SolarisArchitecture)
#   define XIncDir /local/X11R6/include
#   define XLibDir /local/X11R6/lib
#  else
#   define XIncDir /local/X11R5/include
#   define XLibDir /local/X11R5/lib
#  endif
# endif
#endif /* SunArchitecture */

/* explicitly name the .a X libraries */
#if defined(AutoBinary) && !defined(SunArchitecture)
# if defined(LinuxArchitecture) /* X11R6 */
#  define XLibraries $(XLIBDIR)/libXaw.a $(XLIBDIR)/libXmu.a \
	$(XLIBDIR)/libXt.a $(XLIBDIR)/libSM.a $(XLIBDIR)/libXext.a \
        $(XLIBDIR)/libX11.a $(XLIBDIR)/libICE.a
# endif
# if defined(SGIArchitecture)	/* X11R6 */
   /*
    * Leave SGI as default of shared X libraries since IRIX doesn't seem
    * to come with a static libX11.a
    */
#  ifdef notdef
#   define XLibDir /usr/lib
#   define XLibraries $(XLIBDIR)/libXaw.a $(XLIBDIR)/libXmu.a \
	$(XLIBDIR)/libXt.a $(XLIBDIR)/libSM.a $(XLIBDIR)/libXext.a \
        $(XLIBDIR)/libX11_s.a $(XLIBDIR)/libICE.a
#  endif
# endif
# if defined(HPArchitecture)
#  if OSMajorVersion < 10
#   define XLibraries $(XLIBDIR)/libXaw.a $(XLIBDIR)/libXmu.a \
	$(XLIBDIR)/libXt.a $(XLIBDIR)/libXext.a $(XLIBDIR)/libX11.a
#  else
#   define XLibraries $(XLIBDIR)/libXaw.a $(XLIBDIR)/libXmu.a \
	$(XLIBDIR)/libXt.a $(XLIBDIR)/libXext.a $(XLIBDIR)/libX11.a \
	$(XLIBDIR)/libSM.a $(XLIBDIR)/libICE.a
#  endif
# endif
#endif

#if !BuildRDSS
# define RDSSLibDir /usr/local/lib
#endif

#define NetCDFLibDir /usr/local/lib
#define NetCDFIncDir /usr/local/include
#ifdef AutoBinary
# define NetCDFLibrary NetCDFLibDir/libnetcdf.a
#endif

#define UDUnitsLibDir /usr/local/lib
#define UDUnitsIncDir /usr/local/include
#ifdef AutoBinary
# define UDUnitsLibrary UDUnitsLibDir/libudunits.a
#endif

XCOMM --- Deciding FORTRAN library paths

#ifdef SunArchitecture
/* 
 * If we're compiling binaries we need to explicitly name nonsharable
 * libraries.
 */
# ifndef SolarisArchitecture /* sunos 4.1.3 */
#  ifndef FortMajorVersion
#   define FortMajorVersion 1
#  endif
#  if FortMajorVersion > 1
/*  SunOS 4 with gcc or cc and FORTRAN SC2.x */
#   ifndef AutoBinary
#    define FortranLibraries \
     -L/usr/lang/SC2.0.1 -lF77 -lV77 -lM77 -lansi /usr/lang/SC2.0.1/values-Xa.o
#   else
#    define FortranLibraries /usr/lang/SC2.0.1/libF77.a \
      /usr/lang/SC2.0.1/libV77.a /usr/lang/SC2.0.1/libM77.a \
      /usr/lang/SC2.0.1/libm.a /usr/lang/SC2.0.1/libansi.a \
      /usr/lang/SC2.0.1/values-Xa.o
#   endif
/* SunOS 4 with acc and FORTRAN SC2.x */
/* # define FortranLibraries -L/usr/lang/SC2.0.1 -lF77 -lV77 -lM77 -lansi */
#  else	/* SC 1.0.1 */
#   ifndef AutoBinary
#    define FortranLibraries -L/usr/lang/SC1.0.1 -lF77 -lV77
#   else
#    define FortranLibraries \
      /usr/lang/SC1.0.1/libF77.a /usr/lang/SC1.0.1/libV77.a \
      /usr/lang/SC1.0.1/libm.a
#   endif
#  endif /* FortMajorVersion */
# else /* Solaris: C2, C3, and C4. */
#  ifndef FortMajorVersion
#   define FortMajorVersion 4	/* default to C4.0 */
#  endif
#  if FortMajorVersion > 3
/* The latest SC4.0 installation on stout and steam */
#   ifndef AutoBinary
#    define FortranLibraries -L/opt/SUNWspro/SC4.0/lib -lF77 -lV77 -lM77 -lsunmath
#   else
#    define FortranLibraries /opt/SUNWspro/SC4.0/lib/libF77.a \
      /opt/SUNWspro/SC4.0/lib/libV77.a /opt/SUNWspro/SC4.0/lib/libM77.a \
      /opt/SUNWspro/SC4.0/lib/libsunmath.a
#   endif
#  else
#  if FortMajorVersion > 2
/* -lsunmath doesn't get linked into /opt/SUNWspro/lib
 * so it really does have to point explicitly at SC3.0...
 * And 3.0.1 requires M77 also.
 */
/*#   define FortranLibraries -L/opt/SUNWspro/SC3.0/lib -lF77 -lV77 -lsunmath*/
/*
 * Solaris, SC3.0.1, for some reason (for some programs) now requires M77
 */
#   ifndef AutoBinary
#    define FortranLibraries -L/opt/SUNWspro/SC3.0.1/lib \
					-lF77 -lV77 -lM77 -lsunmath
#   else
#    define FortranLibraries /opt/SUNWspro/SC3.0.1/lib/libF77.a \
      /opt/SUNWspro/SC3.0.1/lib/libV77.a /opt/SUNWspro/SC3.0.1/lib/libM77.a \
      /opt/SUNWspro/SC3.0.1/lib/libsunmath.a
#   endif
#  else
#   define FortranLibraries -L/opt/SUNWspro/SC2.0.1 -lF77 -lV77
#  endif /* FortMajorVersion > 2 */
#  endif /* FortMajorVersion > 3 */
# endif /* SolarisArchitecture */
#endif /* SunArchitecture */

#ifdef HPArchitecture
# if OSMajorVersion < 10
#  define FortranLibraries -lU77 -lf -lisamstub
# else
#  define FortranCompiler g77
#  define FortranLibraries -lf2c
#  define FortOptions -O -funix-intrinsics-delete
# endif
#endif

#ifdef SGIArchitecture
/* IRIX 5.x */
# ifndef AutoBinary
#  define FortranLibraries -lF77 -lI77 -lU77 -lisam
# else
#  define FortranLibraries /usr/lib/libF77.a /usr/lib/libI77.a \
	/usr/lib/libU77.a /usr/lib/libisam.a
# endif
#endif

#ifdef LinuxArchitecture
# define FortranCompiler g77
# define FortranLibraries -lf2c
#endif

#ifdef LinuxArchitecture
# define TermcapLibrary -lncurses
#endif

#if defined(AutoBinary) && !defined(LinuxArchitecture)
# define MathLibrary /usr/lib/libm.a
# ifdef SolarisArchitecture
#  define TermcapLibrary /usr/ccs/lib/libtermcap.a
# else
#  define TermcapLibrary /usr/lib/libtermcap.a
# endif
# ifndef RegexpLibrary
#  if SystemV || SystemV4
#     define RegexpLibrary /usr/lib/libgen.a
#  endif
# endif
#endif


/*
 * The vendor cf will likely try to redefine this, and we're through with
 * it anyway.
 */
#undef OSMajorVersion

XCOMM --- Finished with Build.tmpl
