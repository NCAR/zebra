/* -*- C -*- */
/*****************************************************************************
 *                                                                           *
 *                            DEFAULT DEFINITONS                             *
 *                                                                           *
 * The following section contains defaults for things specific to the Zebra  *
 * installation.  These can be overridden in the various imake/*.cf files,   *
 * and in the ./site.def and ./config.h files.  Usually the only file which  *
 * should be changed is config.h!  DO NOT MODIFY THIS FILE!!!		     *
 *                                                                           *
 ****************************************************************************/

#define ProjectZebra

# ifndef XCOMM
# define XCOMM #
# endif

/*
 * Specify some symbols required by config.h
 */
# ifndef YES
#	define YES 1
# endif
# ifndef NO
#	define NO 0
# endif

XCOMM -----------------------------------------------------------------------
XCOMM Zebra project makefile template
XCOMM $Id: Project.tmpl,v 1.32 1995-06-09 15:56:16 granger Exp $
XCOMM -----------------------------------------------------------------------

/*
 * The following will not compile at all, and so are forced to NO
 * here outside of the public eye.
 */
# define	BuildRadarLimits	NO	/* still DataObject 	*/
# define 	BuildNatsIngest		NO	/* still DataObject 	*/
# define	BuildP3Ingest		NO	/* still DataObject 	*/
# define	BuildAircraftIngest	NO	/* doesn't build anywhere */
# define	BuildFMIngest		NO	/* still DataObject	*/
# define 	BuildLLPIngest		NO	/* still DataObject	*/

/* ---------------------------------------------------------------------------
 * Extra system-specific information needed by Zebra.  
 * The man stuff is not used presently, but it might be useful someday...
 * //////////////////////////////////////////////////////////////////////// */

#ifndef ManDirectoryRoot
#define ManDirectoryRoot /usr/man
#endif
#ifndef ManSuffix
#define ManSuffix	n		/* use just one tab or cpp will die */
#endif
#ifndef LibManSuffix
#define LibManSuffix	3		/* use just one tab or cpp will die */
#endif

#ifndef OpenWinHome
#define OpenWinHome /usr/openwin
#endif

#ifndef XSharedMemory		/* if the X server has the Shm extension */
#if HasShm
#define XSharedMemory YES
#else
#define XSharedMemory NO
#endif 
#endif

#ifndef ShmDefines		/* the defines to use X shared memory */
#if XSharedMemory
#define ShmDefines -DSHM
#else
#define ShmDefines /**/
#endif
#endif

#ifndef LibraryDefines
#define LibraryDefines StandardDefines
#endif

#ifndef ExtraDefines
# if defined(SGIArchitecture) && SystemV
#  define ExtraDefines -DSVR4
# else
#  define ExtraDefines	/* project-wide defines go here */
# endif
#endif

#ifndef AutoDefines
#define AutoDefines	/* auto-build defines */
#endif

#ifndef HasWritev
#if defined(SunArchitecture) || defined(HPArchitecture) || \
    defined(SGIArchitecture)
#define HasWritev	YES
#else
#define HasWritev	NO
#endif
#endif /* ndef HasWritev */

/* --------------------------------------------------------------------------
 * Zebra's Imake project definitions
 * /////////////////////////////////////////////////////////////////////// */

#ifndef UseInstalled
#define UseInstalled /* since makedepend is assumed installed */
#endif

#ifndef UseInstalledZebra
#define UseInstalledZebra YES
#endif

#ifndef BuildIncRoot
#define BuildIncRoot $(TOP)/include
#endif
#ifndef BuildIncTop
#define BuildIncTop ..	/* Relative to $(TOP)/include */
#endif

#ifndef BaseDir
#define BaseDir /zeb
#endif

#ifndef DataDir
#define DataDir /zeb/data
#endif

#ifndef BinDir
#define BinDir $(TOP)/bin
#endif

#ifndef LibDir
#define LibDir $(TOP)/lib
#endif

#ifndef IncDir
#define IncDir $(TOP)/include
#endif

#ifndef ConfigDir
#define ConfigDir $(TOP)/config
#endif

#ifndef DependDir
#define DependDir $(UTILSRC)/makedepend
#endif

#ifndef InstallAppDefFiles
#define InstallAppDefFiles YES
#endif

#ifndef InstAppFlags
#define InstAppFlags -m 444
#endif

#ifndef XAppLoadDir
#define XAppLoadDir $(LIBDIR)/resources
#endif

#ifndef RemoveTargetProgramByMoving
#define RemoveTargetProgramByMoving NO
#endif

#ifndef ArAdd
#define ArAdd ar ruv
#endif

#ifndef UseCCMakeDepend
#define UseCCMakeDepend NO
#endif

/* ---------------------------------------------------------------------------
 * User-configurable build settings.  These are just the defaults.  Most of the
 * choices will be made in config.h
 * //////////////////////////////////////////////////////////////////////// */

#ifndef DistributeIngest
#define DistributeIngest 	YES
#endif
#ifndef DistributeOptimizer
#define DistributeOptimizer 	YES
#endif
#ifndef DistributeDataUtil
#define DistributeDataUtil 	YES
#endif
#ifndef DistributeRealtimeDataStoreTools
#define DistributeRealtimeDataStoreTools YES
#endif
#ifndef DistributeDataManager
#define DistributeDataManager	YES
#endif
#ifndef DistributeXHelp
#define DistributeXHelp		YES
#endif

#ifndef UseXWindows
#define UseXWindows	YES	/* RDSS libraries need to know this */
#endif

#ifndef UseOpenWindows
#define UseOpenWindows NO
#endif

#ifndef OpenWindowsVersion
#define OpenWindowsVersion 3
#endif

/*
 * If we're supposed to be building the part of RDSS we need, define
 * symbols appropriately.
 */
#ifndef BuildRDSS
#define BuildRDSS NO
#endif
#if BuildRDSS
# define RDSSDir BaseDir
# define RDSSIncDir BuildIncRoot
# define RDSSIncludes /* nothing */
# define RDSSLibDir $(LIBDIR)
# if UseInstalledZebra
#  define RDSSUILibrary $(LIBDIR)/librdssui.a
#  define RDSSUtilLibrary $(LIBDIR)/librdssutil.a
# else
#  define RDSSUILibrary $(TOP)/ui/librdssui.a
#  define RDSSUtilLibrary $(TOP)/util/librdssutil.a
# endif
# define RDSSLibrary $(LIBRDSSUI) $(LIBRDSSUTIL)
# if UseInstalledZebra
#  define UicCmd $(BINDIR)/uic
#  define UibCmd $(BINDIR)/uib
# else
#  define UicCmd $(TOP)/ui/uic
#  define UibCmd $(TOP)/ui/uib
# endif
#else
# define RDSSUILibrary	/* RDSSLibrary symbol will be used instead */
# define RDSSUtilLibrary /* " */
#endif

#ifndef UicCmd
#define UicCmd uic	/* Assumes uic in path */
#endif

#ifndef UibCmd
#define UibCmd uib	/* Assumes uib in path */
#endif

#ifndef RDSSDir
#define RDSSDir /rdss
#endif

/* //////////////////////////////////////////////////// Includes ////////// */
/*--------------------------------------------------------------------------*/
/* If no include directory has been defined, the default will just omit an  */
/* include option altogether.  An include option could still be specified at*/
/* run-time by using something like 'make NETCDFINCLUDES=-I/netcdf'	    */
/*--------------------------------------------------------------------------*/

#ifndef NetCDFIncDir
#   define NetCDFIncDir /**/
#   ifndef NetCDFIncludes
#      define NetCDFIncludes /**/
#   endif
#else
#   ifndef NetCDFIncludes
#      define NetCDFIncludes -I$(NETCDFINCDIR)
#   endif
#endif

/*
 * For RDSS, the default include directory will be RDSSDir/include
 */
#ifndef RDSSIncDir
#   define RDSSIncDir $(RDSSDIR)/include
#   ifndef RDSSIncludes
#      define RDSSIncludes -I$(RDSSINCDIR)
#   endif
#else
#   ifndef RDSSIncludes
#      define RDSSIncludes -I$(RDSSINCDIR)
#   endif
#endif

/*
 * X include directory.  Do the right thing if they want openwin.
 */
# ifndef XIncDir
#	if UseOpenWindows
#		define XIncDir /usr/openwin/include
#	endif
# endif

#ifndef XIncDir
#   define XIncDir /**/	/* assume X includes in std search path */
#   ifndef XIncludes
#      define XIncludes /**/
#   endif
#else
#   ifndef XIncludes
#      define XIncludes -I$(XINCDIR)
#   endif
#endif

/* /////////////////////////////////////////////// Libraries ///////////// */
/*-------------------------------------------------------------------------*/

#ifndef RDSSLibDir
#   define RDSSLibDir /**/
#   ifndef RDSSLibrary
#      define RDSSLibrary LoaderLibPrefix -lrdssui -lrdssutil
#   endif
#   ifndef RDSSGraphics
#      define RDSSGraphics LoaderLibPrefix -lrdssgraph
#   endif
#else
#   ifndef RDSSLibrary
#      define RDSSLibrary -L$(RDSSLIBDIR) LoaderLibPrefix -lrdssui -lrdssutil
#   endif
#   ifndef RDSSGraphics
#      define RDSSGraphics -L$(RDSSLIBDIR) LoaderLibPrefix -lrdssgraph
#   endif
#endif

#ifndef NetCDFLibDir
#   define NetCDFLibDir /**/
#   ifndef NetCDFLibrary
#      define NetCDFLibrary LoaderLibPrefix -lnetcdf
#   endif
#else
#   ifndef NetCDFLibrary
#      define NetCDFLibrary -L$(NETCDFLIBDIR) LoaderLibPrefix -lnetcdf
#   endif
#endif

#ifndef XLibDir
#   if UseOpenWindows
#      define XLibDir $(OPENWINHOME)/lib
#   endif
#endif

/*
 * Solaris requires the -R option for shared libraries or they never get
 * found again when you run the program without LD_LIBRARY_PATH.
 */
# if defined(XLibDir) && HasLdRunPath
#	define XRunPath -R$(XLIBDIR)
# else
#	define XRunPath /**/
# endif

#ifndef XLibDir
#   define XLibDir /**/
#   ifndef XLibraries
#      define XLibraries LoaderLibPrefix -lXaw LoaderLibPrefix -lXmu \
LoaderLibPrefix -lXt LoaderLibPrefix -lXext LoaderLibPrefix -lX11
#   endif
#endif
#ifndef XLibraries
#   define XLibraries XRunPath -L$(XLIBDIR) LoaderLibPrefix -lXaw LoaderLibPrefix -lXmu \
LoaderLibPrefix -lXt LoaderLibPrefix -lXext LoaderLibPrefix -lX11
#endif

#if ! UseInstalledZebra
#ifndef ZebLibrary
#    define ZebLibrary	 	$(TOP)/src/lib/libZeb.a
#endif
#ifndef ZebDSLibrary
#    define ZebDSLibrary	$(TOP)/src/ds/libZebDS.a
#endif
#ifndef MCIDASLibrary
#    define MCIDASLibrary	$(TOP)/src/ingest/mcidas/libmcidas.a
#endif
#endif

#ifndef ZebLibrary
#define ZebLibrary LoaderLibPrefix $(LIBDIR)/libZeb.a
#endif

# ifndef ZebDSLibrary
#define ZebDSLibrary LoaderLibPrefix $(LIBDIR)/libZebDS.a
#endif

# ifndef MCIDASLibrary
#define MCIDASLibrary LoaderLibPrefix $(LIBDIR)/libmcidas.a
#endif

#ifndef FortranLibraries
#define FortranLibraries LoaderLibPrefix -lF77	/* just a guess */
#endif

#ifndef PCAPLibrary
#define PCAPLibrary -lpcap
#endif

#ifndef SudsLibrary
#define SudsLibrary $(RDSSDIR)/suds/libsuds.a
#endif
#ifndef PamCfgLibrary
#define PamCfgLibrary LoaderLibPrefix -lunp
#endif

#ifndef RegexpLibrary
#  if SystemV || SystemV4
#     define RegexpLibrary LoaderLibPrefix -lgen
#  else
#     define RegexpLibrary /**/
#  endif
#endif

#ifndef TermcapLibrary
#define TermcapLibrary LoaderLibPrefix -ltermcap
#endif

#ifndef MathLibrary
#define MathLibrary LoaderLibPrefix -lm
#endif

#ifndef SystemLibraries
#  if SystemV || SystemV4
#     define SystemLibraries /*LoaderLibPrefix -lgen $(MATHLIB) $(TERMCAPLIB)*/
#  else
#     define SystemLibraries /*$(MATHLIB) $(TERMCAPLIB)*/
#  endif
#endif

/* ///////////////////////////////////////////// Compiler options //////// */
/*-------------------------------------------------------------------------*/
#ifndef UseGcc
#define UseGcc NO	/* we'll have to assume they don't have it */
#endif
#ifndef CCompiler
#if UseGcc
#define CCompiler gcc
#ifndef CCOptions
#define CCOptions -O DefaultCCOptions	/* we can combine -O and -g */
#endif
#else /* ! UseGcc */
#define CCompiler CcCmd /* CcCmd is the default compiler set in Imake.tmpl */
#endif
#endif /* CCompiler */

#ifndef CCOptions
#define CCOptions DefaultCCOptions
#endif
#ifndef CCStaticOption
#if UseGcc
#define CCStaticOption -static
#else
#define CCStaticOption -Bstatic
#endif
#endif /* CCStaticOption */

#ifndef CDebugFlags
#define CDebugFlags DefaultCDebugFlags
#endif
#ifndef FortDebugFlags
#define FortDebugFlags /* none */
#endif
#ifndef FortOptions
#ifdef HPArchitecture
#define FortOptions -O +ppu
#else
#define FortOptions -O
#endif /* HPArchitecture */
#endif /* FortOptions */

/* ///////////////////////////////////////////// Miscellaneous /////////// */
/*-------------------------------------------------------------------------*/

#ifndef HaveEmacs
#define HaveEmacs NO
#endif
#ifndef EmacsPath
#define EmacsPath emacs
#endif
#ifndef HaveEmacs19
#define HaveEmacs19 NO
#endif
#ifndef Emacs19Path
#define Emacs19Path emacs
#endif

#ifndef HasCvs
#define HasCvs NO
#endif

#ifndef WantCvsIgnore
#define WantCvsIgnore NO
#endif

/* ////////////////////////////////// Defaults for build options //////// */
/*------------------------------------------------------------------------*/

#ifndef UseMosaic
#define UseMosaic YES
#endif

/*
 * If we're not installing xhelp, then zebra programs need to be told
 * not to look for it and not to include the xhelp header file.
 */
#ifndef BuildXHelp
#if UseMosaic
#define BuildXHelp NO
#else
#define BuildXHelp YES
#endif /* UseMosaic */
#endif

#if BuildXHelp	/* we'll only support if we're told we're building it */
#define XHelpDefines -DSUPPORT_XHELP
#else
#define XHelpDefines /* defining nothing disables xhelp */
#endif

#ifndef BuildRealtimeDataStoreTools
#define BuildRealtimeDataStoreTools NO
#endif

#ifndef BuildIngest
#define BuildIngest NO
#endif
#ifdef BuildOptimizer		/* Force to be NO for now */
#undef BuildOptimizer
#endif
#define BuildOptimizer NO
#ifndef BuildDataManager
#define BuildDataManager NO	/* since it requires C++ */
#endif
#ifndef BuildDataUtilities
#define BuildDataUtilities NO
#endif

#ifndef BuildClassIngest
#define BuildClassIngest YES
#endif
#ifndef BuildRadarLimits
#define BuildRadarLimits YES
#endif
#ifndef BuildSLGrabber
#define BuildSLGrabber YES
#endif
#ifndef BuildAircraftIngest
#define BuildAircraftIngest YES
#endif
#ifndef BuildFMIngest
#define BuildFMIngest YES
#endif
#ifndef BuildIngestScheduler
#define BuildIngestScheduler YES
#endif
#ifndef BuildLLPIngest
#define BuildLLPIngest YES
#endif
#ifndef BuildNatsIngest
#define BuildNatsIngest YES
#endif
#ifndef BuildNowradIngest
#define BuildNowradIngest YES
#endif
#ifndef BuildP3Ingest
#define BuildP3Ingest YES
#endif
#ifndef BuildPamIngest
#define BuildPamIngest YES
#endif
#ifndef BuildProfsIngest
#define BuildProfsIngest YES
#endif
#ifndef BuildRadarIngest
#define BuildRadarIngest YES
#endif
#ifndef BuildRsgIngest
#define BuildRsgIngest YES
#endif
#ifndef BuildSatelliteIngest
#define BuildSatelliteingest
#endif

/*
 * We must redefine the ImakeSubCmdHelper macro so that our project directory
 * gets included by imake in the MakeMakeSubdirs() macro.
 */
#ifdef ImakeSubCmdHelper
#undef ImakeSubCmdHelper
#endif
#ifdef notdef /* UseInstalled */
#define ImakeSubCmdHelper $(IMAKE_CMD)
#else
#define ImakeSubCmdHelper $$imakeprefix$(IMAKE) -I$$imakeprefix$(PROJECTSRC) \
          -I$$imakeprefix$(IRULESRC) $(IMAKE_DEFINES) \
          $(AUTO_DEFINES) -DAutoDefines="$(AUTO_DEFINES)"
#endif


XCOMM -----------------------------------------------------------------------
XCOMM Zebra make variables; coordinated with config.h and the above defaults
XCOMM -----------------------------------------------------------------------

     BUILDINCROOT = BuildIncRoot	/* root of build include directory */
      BUILDINCDIR = $(BUILDINCROOT)	/* where headers put in inc dir */
      BUILDINCTOP = BuildIncTop		/* top relative to BUILDINCDIR */

/*
 * General directory locations
 */
           BINDIR = BinDir		/* programs */
          INCROOT = IncDir		/* base of where to put header files */
           INCDIR = IncDir		/* The build and install includes  */
           LIBDIR = LibDir		/* Zebra project library */
          DESTDIR = 
       DISTCURDIR = $(CURRENT_DIR)	/* Default, usually on cmd-line */
      XAPPLOADDIR = XAppLoadDir         /* Resource file installation dir */
          RDSSDIR = RDSSDir		/* Top of RDSS installation */
      OPENWINHOME = OpenWinHome

/* 
 * At the moment, this section sets the DEPEND command to an installed version,
 * while IMAKE and MKDIRHIER are set to the distributed locations
 */
            IMAKE = $(IMAKESRC)/imake
           DEPEND = makedepend		/* Assumes in path */
        MKDIRHIER = BourneShell $(SCRIPTSRC)/mkdirhier.sh

        CONFIGSRC = $(TOP)/config
       PROJECTSRC = $(CONFIGSRC)/project
          UTILSRC = $(CONFIGSRC)/util
        SCRIPTSRC = $(CONFIGSRC)/util
           DOCSRC = $(TOP)/doc
         IMAKESRC = $(CONFIGSRC)/imake
        DEPENDSRC = DependDir
   IMAKE_INCLUDES = -I$(NEWTOP)$(PROJECTSRC) -I$(NEWTOP)$(IRULESRC)

     AUTO_DEFINES = AutoDefines
         IRULESRC = $(CONFIGSRC)/cf
        IMAKE_CMD = $(NEWTOP)$(IMAKE) $(IMAKE_INCLUDES) $(IMAKE_DEFINES) \
                    $(AUTO_DEFINES) -DAutoDefines="$(AUTO_DEFINES)"
     ICONFIGFILES = $(PROJECTSRC)/Project.tmpl $(PROJECTSRC)/Zebra.rules \
                    $(PROJECTSRC)/config.h $(IRULESRC)/Imake.tmpl \
                    $(IRULESRC)/site.def $(IRULESRC)/Imake.rules

/*
 * Include directories
 */
       RDSSINCDIR = RDSSIncDir
     NETCDFINCDIR = NetCDFIncDir
          XINCDIR = XIncDir

/*
 * Directory include options; only the TOP_INCLUDES option will always exist
 * on the command line.  The others, except for RDSSIncludes, are empty
 * by default.
 */
     TOP_INCLUDES = -I$(BUILDINCDIR)
     RDSSINCLUDES = RDSSIncludes
        XINCLUDES = XIncludes
   NETCDFINCLUDES = NetCDFIncludes
   CONFIGINCLUDES =

/* 
 * Project-wide include directories.  
 * Local Imakefiles use the INCLUDES variable
 */
   EXTRA_INCLUDES = $(XINCLUDES) $(RDSSINCLUDES) \
                    $(NETCDFINCLUDES) $(CONFIGINCLUDES)
   CXXEXTRA_INCLUDES = $(XINCLUDES) $(RDSSINCLUDES) \
                       $(NETCDFINCLUDES) $(CONFIGINCLUDES)
/*
 * We redefine the order of the ALLINCLUDES variable here so that top
 * includes will be first on the compiler command line, but the include
 * path can still be overridden with the INCLUDES variable.  See Imake.tmpl.
 */
      ALLINCLUDES = $(INCLUDES) $(TOP_INCLUDES) $(EXTRA_INCLUDES) \
                    $(STD_INCLUDES)

/*
 * Project-wide defines in EXTRA_DEFINES.  Client defines in DEFINES.
 * Clients which need to test for shared memory should set 
 * DEFINES = $(SHMDEFINES).  Propagate the auto-definitions to source
 * compilation as well as imake commands.  RDSS_EXTRA_DEFS is for UI and
 * Util Imakefiles which redefine EXTRA_DEFINES instead of using DEFINES.
 */
    EXTRA_DEFINES = ExtraDefines $(AUTO_DEFINES)
  RDSS_EXTRA_DEFS = ExtraDefines $(AUTO_DEFINES) -DUNIX
       SHMDEFINES = ShmDefines
     XHELPDEFINES = XHelpDefines
/*
 * For RDSS source which needs to know to compile X windows support
 */
     XWINDOWSFLAG = -DXSUPPORT
/* 
 * Default directory paths specified in config.h.  Programs which need
 * these symbols defined in their source should add $(DIRDEFINES) to the
 * DEFINES variable in their Imakefile.  Only the Zebra library should need
 * this; all other programs should use the ConfigVars routines from the
 * library.
 */
       DEFBASEDIR = BaseDir
        DEFBINDIR = BinDir
        DEFLIBDIR = LibDir
       DEFDATADIR = DataDir
       DEFRDSSDIR = RDSSDir
       DIRDEFINES = '-DBASEDIR="$(DEFBASEDIR)"' '-DBINDIR="$(DEFBINDIR)"' \
                    '-DLIBDIR="$(DEFLIBDIR)"' '-DDATADIR="$(DEFDATADIR)"' \
                    '-DRDSSDIR="$(DEFRDSSDIR)"'

/*
 * Library directories
 */
       RDSSLIBDIR = RDSSLibDir
     NETCDFLIBDIR = NetCDFLibDir
          XLIBDIR = XLibDir

/*
 * Library link command-line options.  These make variables should include
 * any -L options and the -l prefix to library names, or they can explicitly
 * name the archive file (which is what LIBZEB defaults to, which is why it can
 * be included in the default value of DEPLIBS).
 */
           LIBZEB = ZebLibrary
         LIBZEBDS = ZebDSLibrary
        LIBNETCDF = NetCDFLibrary
          LIBPCAP = PCAPLibrary
            FLIBS = FortranLibraries
          LIBRDSS = RDSSLibrary
        LIBRDSSUI = RDSSUILibrary
      LIBRDSSUTIL = RDSSUtilLibrary
     LIBRDSSGRAPH = RDSSGraphics
          LIBSUDS = SudsLibrary
           LIBUNP = PamCfgLibrary
        LIBMCIDAS = MCIDASLibrary
            XLIBS = XLibraries
          LIBMATH = MathLibrary
       LIBTERMCAP = TermcapLibrary
        LIBREGEXP = RegexpLibrary
    SYS_LIBRARIES = SystemLibraries

          DEPLIBS = $(LIBZEB)
          MATHLIB = $(LIBMATH)
       TERMCAPLIB = $(LIBTERMCAP)
/*
 * Override some make variables settings in Imake.tmpl.  Set LD_RUN_PATH
 * to our X libraries if it exists, and don't bother with LDPRELIB since
 * we already have the X libraries in a link option.
 */
         LDPRELIB = 
       CCENVSETUP = 
      CXXENVSETUP = 
#if HasCvs && WantCvsIgnore
        CVSIGNORE = .cvsignore
#endif
/*
 * Only set the Fortran compiler explicitly if a value has been defined.
 * Otherwise we'll default to Make's implicit rule value
 */
#ifdef FortranCompiler
              F77 = FortranCompiler
               FC = FortranCompiler
#endif
      FORTOPTIONS = FortOptions
   FORTDEBUGFLAGS = FortDebugFlags
           FFLAGS = $(FORTOPTIONS) $(FORTDEBUGFLAGS)
          FCFLAGS = $(FORTOPTIONS) $(FORTDEBUGFLAGS)

              UIC = UicCmd
              UIB = UibCmd
            ARADD = ArAdd
     INSTAPPFLAGS = InstAppFlags

            EMACS = EmacsPath
          EMACS19 = Emacs19Path

/*
 * Our own implicit rules, such as for C++ files (.cc extension)
 */
#ifdef SGIArchitecture
.SUFFIXES:	.cc

.cc.o:
	$(CXX) $(CXXFLAGS) -U_SGI_SOURCE -c $<
#else
.cc.o:
	$(CXX) $(CXXFLAGS) -c $<
#endif

/*
 * HP's f77 groks .F files, but somebody forgot to tell their make about it.
 */
#if defined(HPArchitecture) || defined(SGIArchitecture)
.SUFFIXES:	.F

.F.o:
	$(FC) $(FFLAGS) -c $<
#endif

/*
 * Rules specific to the Zebra project.  Some of them override rules
 * in Imake.rules, and so those rules have to be re-defined since 
 * Imake.rules has already been included at this point.
 */
#include <Zebra.rules>
