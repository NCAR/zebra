XCOMM $Id: Imakefile,v 1.29 1997-11-25 16:25:31 granger Exp $
XCOMM
XCOMM This is the top-level Imakefile for the Zebra distribution.
XCOMM It is modeled after the top-level Imakefile of the MIT X11R5
XCOMM distribution.

#define IHaveSubdirs
#define PassCDebugFlags

      WORLDOPTS = -k

#if BuildRDSS
    RDSSSUBDIRS = util ui
#endif
        SUBDIRS = config $(RDSSSUBDIRS) src
    DISTSUBDIRS = config $(RDSSSUBDIRS) src

          ETAGS = etags
     ETAGSFLAGS = 

        ZIPPIPE = gzip -c
         ZIPEXT = gz

XCOMM Note that for distributions, Makefile should be a copy of 
XCOMM Makefile.ini and NOT the Makefile created by imake.  The tarfile
XCOMM target copies Makefile.ini over Makefile automatically, and
XCOMM adds Makefile to the distfiles target.

      DISTFILES = Imakefile Makefile.ini /*Makefile*/ ChangeLog

XCOMM From the top-level directory, the default behavior will be the same
XCOMM as the "Everything" target, i.e. make sure all Makefiles are
XCOMM up-to-date, do includes, depends, and finally install.  The
XCOMM difference between World and Everything is that Everything does not
XCOMM do a clean first.
XCOMM 
XCOMM If someone really wants to do an 'all', they have to ask for it 
XCOMM explicitly.  Now that UseInstalledZebra exists and can be set to NO,
XCOMM a 'make all' is a reasonable thing to do.

default::
	@echo "The default target is 'Everything'."
	@echo "There are two principle top-level make targets available:"
	@echo "The 'Everything' target performs:"
	@echo "	make Makefile"
	@echo "	make Makefiles"
	@echo "	make includes"
	@echo "	make depend"
	@echo "	make install"
	@echo "The 'World' target performs:"
	@echo "	make Makefile"
	@echo "	make Makefiles"
	@echo "	make clean"
	@echo "	make includes"
	@echo "	make depend"
	@echo "	make install"
	@echo "If you are installing Zebra for the first time, break"
	@echo "out of this make by typing Ctl-C.  Make sure you have"
	@echo "read and performed the configuration instructions,"
	@echo "and then enter the command: 'make World'."
	@echo "You can enter any of the targets Makefile, Makefiles, clean,"
	@echo "includes, depend, all, or install on the make command line,"
	@echo "but you risk compiling with outdated header or object files."
	@echo "Other targets available:"
	@echo "	make distclean      - clean all subdirectories, "
	@echo "			      including ./include"
	@echo "	make tarfile        - make a tar file of the distribution,"
	@echo "	                      see Imakefile for info before using"
	@echo "Press <Return> here to continue with 'make Everything',"
	@echo "or press <Ctl-C> to abort."
	@line

default:: Everything

MakeSubdirs($(SUBDIRS))
DependSubdirs($(SUBDIRS))
/*InstallLibSubdirs($(SUBDIRS))*/	/* No longer used */

DistfilesTarget($(DISTFILES))
DistfilesSubdirs($(DISTSUBDIRS))

TESTSUBDIRS = src

TestSubdirs($(TESTSUBDIRS))

#if !UseInstalledZebra
#define MAKE_INCLUDES \
	$(MAKE) MAKE=$(MAKE) $(MFLAGS) includes @@\
	$(MAKE) MAKE=$(MAKE) $(MFLAGS) depend
#else
#define MAKE_INCLUDES \
	@echo "Using installed files --- skipping includes and depend"
#endif

World:: makeMakefile makeWorld

makeWorld:
	@echo ""
	@echo "Building the Zebra distribution"
	@echo ""
	@echo "####################################################"
	@echo "#   Have you read the installation instructions?   #"
	@echo "####################################################"
	@echo "Any log file named make.log or MakeOut will be erased."
	@echo ""
	@date
	@echo ""
	$(MAKE) MAKE=$(MAKE) $(MFLAGS) Makefiles
	$(MAKE) MAKE=$(MAKE) $(MFLAGS) clean
	MAKE_INCLUDES
	$(MAKE) $(WORLDOPTS) MAKE=$(MAKE) $(MFLAGS) install
	@echo ""
	@date
	@echo ""
	@echo "Full build of Zebra complete."
	@echo ""

Everything:: makeMakefile
	@echo ""
	@echo "Rebuilding Zebra"
	@echo ""
	@date
	@echo ""
	$(MAKE) MAKE=$(MAKE) $(MFLAGS) Makefiles
	MAKE_INCLUDES
	$(MAKE) $(WORLDOPTS) MAKE=$(MAKE) $(MFLAGS) install
	@echo ""
	@date
	@echo ""
	@echo "Zebra rebuild complete"
	@echo ""

#
# Use the Makefile target in Makefile.ini, to keep the rules in one place
#
makeMakefile:
	$(MAKE) -f Makefile.ini MAKE=$(MAKE) $(MFLAGS) CC="$(CC)" \
		BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)" makeMakefile

/*
 * To be really clean, we also remove our shared header file directory.
 */
distclean::
	$(RM) -rf $(TOP)/share

/*
 * This is the top-level rule for generating tar files of the distributed
 * files.  The list of files to tar is gotten from the distfiles target.
 * The name of the tarfile can be changed by setting the TARFILE variable
 * on the command line.
 *
 * The -s (silent) option is necessary to get GNU make to not print out
 * its commands for automatically checking for or checking out files.
 * This option is compatible with Sun's make, but others...?
 * Since development is being done on Suns, this is not much of a concern.
 *
 * The 'source' target packages the source distribution by default.
 * The 'binary' target defaults to packaging the binary directories.
 * To include other directories such as project, document, or
 * binary directories, set DISTSUBDIRS and DISTFILES on the command line
 * and use the 'tarfile' target.  See binary and source for examples.
 * Setting DISTSUBDIRS to empty essentially disables the 'make distfiles'
 * and tars only the files and whole directories given in DISTFILES.
 * DISTFILES paths must be relative to the top directory.  Set TARDEST
 * to write the tar file somewhere other than the top directory.
 */
TARFILE = zebra-4.x
TARDEST = .

tarfile:
	@echo Making file $(TARDEST)/$(TARFILE).tar.$(ZIPEXT) ; \
	if mkdir $(TARFILE) ; then \
	  (set -x; \
	   cd $(TARFILE); \
	        for f in $(DISTFILES) $(DISTSUBDIRS); do \
		  $(LN) ../$$f . ; \
		done; \
		rm -f Makefile ; \
		cp ../Makefile.ini Makefile \
	  ) ; \
	  tar cvhf - $(LINKNAMES) \
	     `$(MAKE) -s MAKE=$(MAKE) $(MFLAGS) DISTFILES="$(DISTFILES)" \
		DISTSUBDIRS="$(DISTSUBDIRS)" \
		DISTCURDIR=$(TARFILE) distfiles` | \
		  $(ZIPPIPE) > $(TARDEST)/$(TARFILE).tar.$(ZIPEXT) ; \
	  rm -rf $(TARFILE) ; \
	  echo Done making $(TARDEST)/$(TARFILE).tar.$(ZIPEXT) ; \
	else \
	  echo "Cannot make directory '$(TARFILE)'!  Aborting."; \
	  false ; \
	fi

binary:
	$(MAKE) $(MFLAGS) MAKE=$(MAKE) tarfile TARFILE=$(TARFILE) \
	DISTSUBDIRS= TARDEST="$(TARDEST)" DISTFILES="ChangeLog bin lib include"

source:
	$(MAKE) $(MFLAGS) MAKE=$(MAKE) tarfile TARFILE=$(TARFILE) \
	DISTSUBDIRS="$(DISTSUBDIRS)" TARDEST="$(TARDEST)" \
	DISTFILES="$(DISTFILES) Makefile"

/*
 * Since the mf shortcut turns around and does a depend as well, we'll
 * more-than-likely want to disable the depend part. Just do the
 * Makefile part and then quit
 */
mf:: Makefile
	@echo "Skipping the depend part of this target."
	@echo "Use 'make depend' to perform depend on all subdirectories."
	@false

XCOMM clean out link tree looking for stuff that should get checked in
flushlinks::
	$(MAKE) -k clean
	find . -type l -exec rm {} \;
	find . \( \! \( -type d -o -name Makefile \) \) -print

XCOMM Quick and dirty generation of emacs tags file for Zebra source tree
etags::
	$(ETAGS) $(ETAGSFLAGS) `find src -name "*.[ch]" -print`

