XCOMM $Id: Imakefile,v 1.2 1999-06-25 19:04:08 burghart Exp $
XCOMM
XCOMM This is the top-level Imakefile for the RDSS Libraries distribution.
XCOMM It is modeled after the top-level Imakefile of the MIT X11R5
XCOMM distribution and the top-level Zeb Imakefile.
XCOMM
XCOMM Type 'make World' to do a complete build of the RDSS Libraries.  This
XCOMM will clean out, rebuild and install everything.  If you are installing
XCOMM the Libraries for the first time, please read the installation docs.
XCOMM
XCOMM 'make Everything' does everything that World does except for cleaning
XCOMM out subdirectories and building Makedepend and imake.  This is typically
XCOMM the command to use if you have made some changes to the Libraries and
XCOMM you just want to install the modifications.
XCOMM
XCOMM Type 'make clean' to clean out subdirectories after a successful build.
XCOMM
XCOMM Consult the Makefile for other options. 

#define IHaveSubdirs
#define PassCDebugFlags

      WORLDOPTS = -k
     CHECKFNSRC = $(UTILSRC)/checkfn
        CHECKFN = $(CHECKFNSRC)/checkfn


XCOMM Note that only the SUBDIRS variable is conditional.  All known
XCOMM directories and source files will be distributed whether or
XCOMM not they are configured to be compiled.

        SUBDIRS = config util ui graphics
      DISTFILES = Makefile.ini README.libraries Imakefile
      LINKNAMES = $(TARFILE)/doc/library
       LINKDIRS = doc
    DISTSUBDIRS = config Makedepend imake util ui graphics 
     SRCSUBDIRS = config Makedepend imake util ui graphics 

installdist::
	@echo ""
	@echo "Building RDSS Libraries"
	@echo ""
	@date
	@echo ""
	@echo "This command does a complete build of the RDSS Libraries."
	@echo "It will overwrite existing installed executables and libraries,"
	@echo "using the default target 'World' which builds imake and"
	@echo "performs the following:"
	@echo " make Makefile"
	@echo " make Makefiles"
	@echo " make clean"
	@echo " make includes"
	@echo " make depend"
	@echo " make install"
	@echo ""
	@echo "If you are installing the RDSS Libraries for the first time, "
	@echo "break out of this make by typing Ctl-C.  Make sure you have"
	@echo "read and carried out the configuration instructions, and then "
	@echo "enter the command: 'make -f Makefile.ini World'
	@echo ""
	@echo "Other users who are not making the Libraries for the first time"
	@echo "but do not wish to rebuild everything may also break out of "
	@echo "this command by typing Ctl-C.  You can enter any of the 
	@echo "usual targets (Everything, Makefile, Makefiles, clean, includes,"
	@echo "depend or install) by specifically naming the targets on the "
	@echo "make command line."  
	@echo "" 
	@echo "Other targets are available; check the Makefile file for"
	@echo "possibilities.  Be aware that with some targets you risk "
	@echo "compiling with outdated files."
	@echo ""
	@echo ""
	@echo "Press <RETURN> to continue,"
	@echo "or press Ctl-C to abort".
	@line

installdist:: World

World::
	cd $(IMAKESRC); $(MAKE) $(MFLAGS) -f Makefile.ini clean; $(MAKE) $(MFLAGS) -f Makefile.ini BOOTSTRAPCFLAGS="$(BOOTSTRAPCFLAGS)" INCLUDES=-I../config 
	-$(RM) Makefile.bak; $(MV) Makefile Makefile.bak
	$(MAKE) $(MFLAGS) -f Makefile.bak Makefile
	$(MAKEDEPEND_CMD)
	$(MAKE) $(MFLAGS) Makefiles
	$(MAKE) $(MFLAGS) clean
	$(MAKE) $(MFLAGS) includes
	$(MAKE) $(MFLAGS) depend
	$(MAKE) $(MFLAGS) $(WORLDOPTS) install
	@echo ""
	@date
	@echo ""
	@echo "RDSS Libraries build complete."
	@echo ""

Everything::
	@echo ""
	-$(RM) Makefile.bak; $(MV) Makefile Makefile.bak
	$(MAKE) $(MFLAGS) -f Makefile.bak Makefile
	$(MAKE) $(MFLAGS) Makefiles
	$(MAKE) $(MFLAGS) includes
	$(MAKE) $(MFLAGS) depend
	$(MAKE) $(MFLAGS) $(WORLDOPTS) install
	@echo ""
	@date
	@echo ""
	@echo "RDSS Libraries build complete."
	@echo ""

MakeSubdirs($(SUBDIRS))
DependSubdirs($(SUBDIRS))
InstallLibSubdirs($(SUBDIRS))
DistfilesTarget($(DISTFILES))
DistfilesSubdirs($(DISTSUBDIRS))

/*
 * Some probably wouldn't want a simple 'make clean' to remove
 * the ./bin and ./include directories, and since this is the natural
 * distribution state, I made this the 'distclean' target:
 */

distclean::
	$(RM) -rf ./include ./bin
	cd $(IMAKESRC); $(MAKE) $(MFLAGS) -f Makefile.ini clean

distclean:: clean


/*
 * This is the top-level rule for generating tar files of the distributed
 * files.  The list of files to tar is gotten from the distfiles target.
 * The name of the tarfile can be changed by setting the TARNAME variable
 * on the command line.  It defaults to rdssdist.
 *
 * The -s (silent) option is necessary to get GNU make to not print out
 * its commands for automatically checking for or checking out files.
 * This option is compatible with Sun's make, but others...?
 * Since development is being done on Suns, this is not much of a concern.
 *
 * The tarfile (aka distfile) target packages the complete distribution,
 * including config, project, and document directories.
 * 
 * The srcfile target is intended for developers who only to
 * compile the source only.  This tar file will include only what
 * is necessary to compile and install all of the executables.
 * To further restrict what is packaged, set the DISTSUBDIRS
 * variable from the command line, e.g.
 *
 * 	make srcfile SRCNAME=pikes-copy \
 *		SRCSUBDIRS="imake config msg"
 */
TARFILE = rdsslibs 
SRCFILE = rdsslibs-src

tarfile: FORCE
	@echo Making file $(TARFILE).tar.Z ; \
	if mkdir $(TARFILE) ; then \
	  (set -x; \
	   cd $(TARFILE); for f in $(DISTFILES) $(LINKDIRS) $(DISTSUBDIRS); do \
		  $(LN) ../$$f . ; \
	  done) ; \
	  tar cvhf - \
	  `$(MAKE) $(MFLAGS) -s CURRENT_DIR=$(TARFILE) distfiles` \
	  $(LINKNAMES) | \
		  compress -c > $(TARFILE).tar.Z ; \
	$(MAKE) $(MFLAGS) -s Makefile; \
	(cd imake; $(MAKE) $(MFLAGS) -s CURRENT_DIR=./imake Makefile); \
	(cd Makedepend; $(MAKE) $(MFLAGS) -s CURRENT_DIR=./Makedepend \
	  Makefile); \
	$(MAKE) $(MFLAGS) -s Makefiles; \
	  rm -rf $(TARFILE) ; \
	  echo Done making $(TARFILE).tar.Z ; \
	else \
	  echo "Cannot make directory '$(TARFILE)'!  Aborting."; \
	  false ; \
	fi

srcfile: FORCE
	@echo Making file $(SRCFILE).tar.Z ; \
	if mkdir $(SRCFILE) ; then \
	  (set -x; \
	   cd $(SRCFILE); for f in $(DISTFILES) $(SRCSUBDIRS); do \
		  $(LN) ../$$f . ; \
	  done) ; \
	  tar cvhf - \
	     `$(MAKE) $(MFLAGS) -s CURRENT_DIR=$(SRCFILE) \
	      DISTSUBDIRS="$(SRCSUBDIRS)" distfiles ` | \
		  compress -c > $(SRCFILE).tar.Z ; \
	$(MAKE) $(MFLAGS) -s Makefile; \
	(cd imake; $(MAKE) $(MFLAGS) -s CURRENT_DIR=./imake Makefile); \
	(cd Makedepend; $(MAKE) $(MFLAGS) -s CURRENT_DIR=./Makedepend \
	  Makefile); \
	$(MAKE) $(MFLAGS) -s Makefiles; \
	  rm -rf $(SRCFILE) ; \
	  echo Done making $(SRCFILE).tar.Z ; \
	else \
	  echo "Cannot make directory '$(SRCFILE)'!  Aborting."; \
	  false ; \
	fi

FORCE::

/*
 * Since the mf shortcut turns around and does a depend as well, we'll
 * more-than-likely want to disable the depend part. Just do the
 * Makefile part and then quit
 */
mf:: Makefile
	@echo "Skipping the depend part of this target."
	@echo "Use 'make depend' to perform depend on all subdirectories."
	@false

/*
 * This section used for generating distributions will not be useful to most
 * people.
 */
XCOMM check all filenames for length, letters, and content
checkfilenames::  $(CHECKFNSRC)/checkfn
	@find . -type d \! -name RCS -exec $(CHECKFNSRC)/find.sh $(CHECKFN) {} \;

XCOMM clean out link tree looking for stuff that should get checked in
flushlinks::
	make -k clean
	find . -type l -exec rm {} \;
	find . \( \! \( -type d -o -name Makefile \) \) -print

